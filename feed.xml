<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://elfgzp.cn/feed.xml" rel="self" type="application/atom+xml" /><link href="https://elfgzp.cn/" rel="alternate" type="text/html" /><updated>2020-12-02T11:48:41+00:00</updated><id>https://elfgzp.cn/feed.xml</id><title type="html">Gzp的博客</title><subtitle>一个兴趣使然的程序员</subtitle><author><name>true</name></author><entry><title type="html">K8s 快速上手 (二) 为服务挂载配置文件和存储盘</title><link href="https://elfgzp.cn/2020/10/31/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%BA%8C)%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%8C%82%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%98%E5%82%A8%E7%9B%98.html" rel="alternate" type="text/html" title="K8s 快速上手 (二) 为服务挂载配置文件和存储盘" /><published>2020-10-31T10:46:45+00:00</published><updated>2020-10-31T10:46:45+00:00</updated><id>https://elfgzp.cn/2020/10/31/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%BA%8C)%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%8C%82%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%98%E5%82%A8%E7%9B%98</id><content type="html" xml:base="https://elfgzp.cn/2020/10/31/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%BA%8C)%E4%B8%BA%E6%9C%8D%E5%8A%A1%E6%8C%82%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%98%E5%82%A8%E7%9B%98.html">&lt;p&gt;上一篇文章 &lt;a href=&quot;https://elfgzp.cn/2020/10/25/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%B8%80)%E5%9C%A8%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1.html&quot;&gt;「K8s 快速上手（一) 在云主机上部署我的服务」&lt;/a&gt; 介绍了如何快在云主机上快速的搭建 K3s，并且将一个服务部署到 K3s 中。&lt;/p&gt;

&lt;p&gt;这篇文章将介绍如何给部署的服务挂载配置文件或存储盘。&lt;/p&gt;

&lt;h2 id=&quot;为服务挂载配置文件&quot;&gt;为服务挂载配置文件&lt;/h2&gt;

&lt;p&gt;我们同样以上一篇文章的 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 为例，上一篇的 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件内容如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Namespace&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们想将一个 nginx 配置文件挂载到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/conf.d&lt;/code&gt; 目录下，我们这次需要使用到一个 K8s 资源 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt; 能更加方便的管理配置文件并且也能以非常便捷的方式挂载到服务容器中。接下来我就来介绍一下如何使用。&lt;/p&gt;

&lt;p&gt;假设我有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.conf&lt;/code&gt; 的配置文件和一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 的文件分别想挂载到 nginx 容器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/conf.d/default.conf&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/index.html&lt;/code&gt; 目录下。这里的 index.html 只是用于演示，正常的生产环境的前端发布还是将前端文件一起 build 在镜像中才是最佳实践。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.conf&lt;/code&gt; 的文件内容如下：&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;_&lt;/span&gt;;

  &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;    /&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 的文件内容如下：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello K8s&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要挂载这两个文件，首先第一步我们需要创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt; 资源，我们直接将这个资源也放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件中，在实际使用中可以按照需要拆分资源到不同的 &lt;code class=&quot;highlighter-rouge&quot;&gt;YAML&lt;/code&gt; 文件。&lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt; 资源的定义如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;index.conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;server {&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;listen       80;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;server_name  _;&lt;/span&gt;

      &lt;span class=&quot;s&quot;&gt;location / {&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;root    /opt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;index  index.html;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;h1&amp;gt;Hello K8s&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后修改我们定义的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 资源，增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.volumes&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.containers[0].volumeMounts&lt;/code&gt; 字段，修改后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/conf.d/default.conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.conf&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/opt/index.html&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改完成后使用应用一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件的变更：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; nginx.yaml 
namespace/nginx-1 created
configmap/nginx-conf created
deployment.apps/nginx created
service/nginx created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get pod -n nginx-1&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; 是否部署完成，部署完成后通过浏览器访问就可以看到效果了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/0b6e76e8-8450-4f89-bc0f-c4702f6987ff.png&quot; alt=&quot;img1&quot; title=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl logs -n nginx-1 {nginx Pod 的名字} -f&lt;/code&gt; 观察 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; 的日志&lt;/p&gt;

&lt;p&gt;假设我们要修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt;，但是在修改后不会直接生效，我们需要重新部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;，可以通过以下命令重新部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl rollout restart deployment &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; nginx-1 nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;为服务挂载存储盘&quot;&gt;为服务挂载存储盘&lt;/h2&gt;

&lt;p&gt;有时候我们需要通过挂载存储盘将服务中的数据持久化，例如：Mysql。在生产环境中，我们一般不应该直接将机器的存储路径挂载到服务容器中，因为这样就无法做到快速扩容和缩容了，在生产环境中一般会使用云厂商提供的存储盘进行挂载。&lt;/p&gt;

&lt;p&gt;但是我们在平常使用并不会购买云厂商的存储盘，所以我这里就以挂载到宿主机的存储路径作为演示。&lt;/p&gt;

&lt;p&gt;假设我们需要把容器中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/nginx/access.log&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/nginx/error.log&lt;/code&gt; 挂载到宿主机的目录下。首先我们先修改一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt; 文件，将容器的日志打到这两个文件。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;index.conf&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;server {&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;listen       80;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;server_name  _;&lt;/span&gt;

      &lt;span class=&quot;s&quot;&gt;access_log  /var/log/nginx/access.log  main;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;error_log  /var/log/nginx/error.log warn;&lt;/span&gt;

      &lt;span class=&quot;s&quot;&gt;location / {&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;root    /opt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;index  index.html;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;lt;h1&amp;gt;Hello K8s&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们需要定义两个 K8s 资源，他们分别是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PersistentVolume&lt;/strong&gt; （持久卷，简称PV）是集群内，由管理员提供的网络存储的一部分。就像集群中的计算节点一样，PV也是集群中的一种资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PersistentVolumeClaim&lt;/strong&gt; 持久卷声明，简称 PVC）是用户的一种存储请求。它和 Pod 类似，Pod 消耗 Node 资源，而 PVC 消耗PV资源。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PVC&lt;/code&gt; 可以理解为持久化存储的“接口”，它提供了对某种持久化存储的描述，但不提供具体的实现；而这个持久化存储的实现部分则由 &lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt; 负责完成。&lt;/p&gt;

&lt;p&gt;我们先为 nginx 定义这两个资源，他们的定义如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PersistentVolume&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-pv&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manual&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2Gi&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/opt/nginx&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-pvc&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manual&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以先看 &lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt; 资源，我们在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/nginx&lt;/code&gt; 下定义了一个存储路径，并且这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt; 的大小为 &lt;code class=&quot;highlighter-rouge&quot;&gt;2Gi&lt;/code&gt;，他的存储类型是 &lt;code class=&quot;highlighter-rouge&quot;&gt;manual&lt;/code&gt; 也就是我们手动维护存储在宿主机的类型，如果使用的是云厂商托管的 K8s，可以查看云厂商支持什么类型。&lt;/p&gt;

&lt;p&gt;注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/nginx&lt;/code&gt; 路径必须存在，我们需要提前在服务器创建这个路径。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们定义了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;PVC&lt;/code&gt; 资源 ，并且存储类型也是 &lt;code class=&quot;highlighter-rouge&quot;&gt;manual&lt;/code&gt;，并且需求是 &lt;code class=&quot;highlighter-rouge&quot;&gt;1Gi&lt;/code&gt;，注意这里的需求要小于等于你定义的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PV&lt;/code&gt;，前面也提到它类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 会消耗 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 的资源，类似我的服务跑多少 CPU 和内存就消耗多少服务器资源，这里就是我需要多少存储就消耗多少存储资源。&lt;/p&gt;

&lt;p&gt;接下来就是修改 nginx 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 资源，修改后的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/nginx/conf.d/default.conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.conf&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/opt/index.html&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/log/nginx&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-pvc&lt;/span&gt;
          
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-conf&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;claimName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-pvc&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-pvc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改完成后应用这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; nginx.yaml
namespace/nginx-1 unchanged
configmap/nginx-conf configured
persistentvolume/nginx-pv created
persistentvolumeclaim/nginx-pvc created
deployment.apps/nginx configured
service/nginx unchanged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等待 nginx 部署完成后，通过浏览器访问 nginx 产生日志，然后就可以在宿主机的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/nginx/&lt;/code&gt; 目录下看到日志。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;access.log 
10.42.0.0 - - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;31/Oct/2020:04:16:22 +0000] &lt;span class=&quot;s2&quot;&gt;&quot;GET / HTTP/1.1&quot;&lt;/span&gt; 200 79 &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;这篇文章主要讲的是如何为服务挂载配置文件和存储盘，但是在实际的生产环境中，使用存储盘的方式还是有差异的。下一篇文章会介绍如何通过，K8s Ingress 资源通过统一的端口和相应的路由配置向外网暴露服务。&lt;/p&gt;</content><author><name>true</name></author><category term="K8s入门教程" /><category term="K8s上手教程" /><category term="K8s" /><summary type="html">上一篇文章 「K8s 快速上手（一) 在云主机上部署我的服务」 介绍了如何快在云主机上快速的搭建 K3s，并且将一个服务部署到 K3s 中。</summary></entry><entry><title type="html">K8s 快速上手（一) 在云主机上部署我的服务</title><link href="https://elfgzp.cn/2020/10/25/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%B8%80)%E5%9C%A8%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1.html" rel="alternate" type="text/html" title="K8s 快速上手（一) 在云主机上部署我的服务" /><published>2020-10-25T12:38:52+00:00</published><updated>2020-10-25T12:38:52+00:00</updated><id>https://elfgzp.cn/2020/10/25/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%B8%80)%E5%9C%A8%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1</id><content type="html" xml:base="https://elfgzp.cn/2020/10/25/k8s-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B(%E4%B8%80)%E5%9C%A8%E4%BA%91%E4%B8%BB%E6%9C%BA%E4%B8%8A%E9%83%A8%E7%BD%B2%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1.html">&lt;p&gt;由于在工作中使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 并且深刻体会到了他带来的便利即好处，但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 学习还是有一定的门槛。
而且在平常自己做一些开源项目时，或者自己做一些小的服务，由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 本身需要的 CPU 和内存较高，大部分薅羊毛买的云主机根本没法使用。&lt;/p&gt;

&lt;p&gt;于是笔者打算写一个系列的 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 上手教程分享给大家，并且分享一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 怎么用在我们平常做开源项目部署服务。&lt;/p&gt;

&lt;h2 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h2&gt;

&lt;p&gt;首先我们想要在我们的云主机上用上 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 自然先要搭建环境，但是这次我们不会直接搭建 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 环境，而是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果对 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 搭建感兴趣的同学可以看我之前的博文 &lt;a href=&quot;https://elfgzp.cn/2020/04/11/k8s-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-kubeadm-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4.html&quot;&gt;「K8s 学习日记」Kubeadm 部署 kubernetes 集群&lt;/a&gt;，当然在生产环境中还是推荐大家使用托管的 K8s。&lt;/p&gt;

&lt;p&gt;有的同学可能就会问了，不是讲 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 吗 ？为什么又来一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;这里就给大家简单说一下，因为搭建  本身较为繁琐，而且要求云主机的配置还比较高，当你把 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 搭建完成后你会发现服务器的 CPU 和内存基本上以及不足以让你部署服务了。&lt;/p&gt;

&lt;p&gt;所以如果打算在平常我们薅羊毛买的云主机上使用使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 或是体验 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 的功能，更推荐大家使用 K3s。&lt;/p&gt;

&lt;p&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 的区别笔者就不在这里介绍了，有兴趣的同学可以自行 Google。大家只要知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 在使用上跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 并无太大差异，当然使用时有什么疑惑可以查阅 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 的文档，而且足够满足我们在平常自己做小的开源项目部署服务使用，这也是笔者的使用感受。&lt;/p&gt;

&lt;p&gt;废话不多说我们直接开始，笔者的云主机是的操作系统是 &lt;code class=&quot;highlighter-rouge&quot;&gt;CentOS 7&lt;/code&gt;，安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 只需要用他的官方一键安装脚本非常便捷。&lt;a href=&quot;https://docs.rancher.cn/docs/k3s/installation/install-options/_index&quot;&gt;(官方文档)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;国内的云主机：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sfL&lt;/span&gt; http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | &lt;span class=&quot;nv&quot;&gt;INSTALL_K3S_MIRROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cn &lt;span class=&quot;nv&quot;&gt;INSTALL_K3S_EXEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--tls-san {你的云服务器的 IP 地址}&quot;&lt;/span&gt; sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;国外的云主机：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-sfL&lt;/span&gt; https://get.k3s.io | &lt;span class=&quot;nv&quot;&gt;INSTALL_K3S_EXEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--tls-san {你的云服务器的 IP 地址}&quot;&lt;/span&gt; sh -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看到如下输出表示安装完成了，是不是非常的简单，笔者在第一次安装时也被 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 的安装便捷震惊了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Finding release &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;channel stable
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Using v1.18.9+k3s1 as release
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Downloading &lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;http://rancher-mirror.cnrancher.com/k3s/v1.18.9-k3s1/sha256sum-amd64.txt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Downloading binary http://rancher-mirror.cnrancher.com/k3s/v1.18.9-k3s1/k3s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Verifying binary download
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Installing k3s to /usr/local/bin/k3s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Creating /usr/local/bin/kubectl symlink to k3s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Creating /usr/local/bin/crictl symlink to k3s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Creating /usr/local/bin/ctr symlink to k3s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Creating killall script /usr/local/bin/k3s-killall.sh
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Creating uninstall script /usr/local/bin/k3s-uninstall.sh
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;: Creating environment file /etc/systemd/system/k3s.service.env
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  systemd: Creating service file /etc/systemd/system/k3s.service
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  systemd: Enabling k3s unit
Created symlink from /etc/systemd/system/multi-user.target.wants/k3s.service to /etc/systemd/system/k3s.service.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  systemd: Starting k3s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输入以下命令就可以知道我们目前 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 已经安装完成并且有一个节点。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get nodes
NAME                STATUS   ROLES    AGE   VERSION
instance-qgq0ripc   Ready    master   66s   v1.18.9+k3s1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了方便后续的使用，直接在自己的电脑上操作，可以在自己的电脑上安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;，笔者用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mac&lt;/code&gt; 所以这里介绍一下 Mac 如何安装，其他操作系统可以自行 Google，非常容易找到。当然如果不做这一步也可以直接在服务器上使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;首先安装 kubectl：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后将云主机上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rancher/k3s/k3s.yaml&lt;/code&gt; 文件拷贝到电脑上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt; 目录。&lt;/p&gt;

&lt;p&gt;最后将 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt; 文件中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;server: https://127.0.0.1:6443&lt;/code&gt; 修改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;server: https://{你的云服务器的 IP 地址}:6443&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这样你就可以在你的电脑上使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 来访问云服务器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 集群了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl get nodes
NAME                STATUS   ROLES    AGE     VERSION
instance-qgq0ripc   Ready    master   5h10m   v1.18.9+k3s1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;k8s-基础概念和如何部署一个服务&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 基础概念和如何部署一个服务&lt;/h2&gt;

&lt;p&gt;在部署服务之前我先来简单讲一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 中的一些基本概念，他们分别是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pod&lt;/strong&gt; &lt;strong&gt;容器组&lt;/strong&gt;，一个 Pod 可能会有一个或多个容器。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt; &lt;strong&gt;部署任务&lt;/strong&gt;，用于定义 Pod 的部署参数，维护 Pod 的状态。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Service&lt;/strong&gt; &lt;strong&gt;服务定义&lt;/strong&gt;，用于将一组 Pod 抽象定义为服务的资源。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt; &lt;strong&gt;命名空间&lt;/strong&gt;，用于分隔不同的资源如：Pod、Deployment、Service…，便于管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一下说这么多的概念可能不方便记忆，我们通过部署一个服务一步一步的来理解这些资源的作用。&lt;/p&gt;

&lt;p&gt;首先 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 在容器的基础上引入了一个 Pod 的概念，大家可以将容器理解成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;进程&lt;/code&gt;，Pod 可以理解成一个进程组，这里不做过多的赘述，可以阅读一下我之前的一篇文章 &lt;a href=&quot;https://elfgzp.cn/2020/06/21/%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-service-mesh.html#part-2docker%E5%88%B0-k8s&quot;&gt;新一代的微服务架构 Service Mesh&lt;/a&gt; 的 &lt;strong&gt;Part 2「Docker」到 「K8s」&lt;/strong&gt; 部分。&lt;/p&gt;

&lt;p&gt;我这里也直接放一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 的定义：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;Image&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;Port&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到它有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;containers&lt;/code&gt; 的属性，是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; 数组，里面是一个容器的定义，包含了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; 容器名称&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;image&lt;/strong&gt; 容器镜像&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ports&lt;/strong&gt; 容器端口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这几个字段非常容易理解，但是我们一般在使用时不会直接写一个 Pod 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;yaml&lt;/code&gt; 定义，而是写一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 的定义，主要原因如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment 拥有更加灵活强大的升级、回滚功能,并且支持滚动更新。&lt;/li&gt;
  &lt;li&gt;使用 Deployment 升级 Pod 只需要定义 Pod 的最终状态，K8s 会为你执行必要的操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们再来看看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 的定义：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;Image&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;Port&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里就肯定有人会觉得，一下子记这么多的定义和字段好难记。这里教大家一个非常方便的记忆方法，可以注意到 Deployment 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; 字段的属性，其实就是一个 Pod 的定义，它也有 &lt;code class=&quot;highlighter-rouge&quot;&gt;containers&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ports&lt;/code&gt; 等属性，说白了 &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; 字段就是用于生成 Pod 的模板。&lt;/p&gt;

&lt;p&gt;这里主要注意 Deployment 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector.matchLabels&lt;/code&gt; 字段，它是用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 识别这次部署任务所关联的 Pod，在 Pod 的定义中同样有 &lt;code class=&quot;highlighter-rouge&quot;&gt;app: myapp&lt;/code&gt; 的字段，这是一个标签，你可以写成你自己定义的标签， 但是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;labels&lt;/code&gt; 必须是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector.matchLabels&lt;/code&gt; 的子集。&lt;/p&gt;

&lt;p&gt;这里说的比较绕，大家就可以理解成，Deployment 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector.matchLabels&lt;/code&gt; 去寻找 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 中定义的 Pod，但是它怎么知道哪些 Pod 是自己创建的呢，所以 Pod 中也必须定义相应的标签，Deployment 才能找到它。&lt;/p&gt;

&lt;p&gt;接下来我先自己动手写一个 Deployment 将一个 nginx 服务部署到 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 中。&lt;/p&gt;

&lt;h3 id=&quot;定义一个-deployment-将-nginx-部署到集群中&quot;&gt;定义一个 Deployment 将 Nginx 部署到集群中&lt;/h3&gt;

&lt;p&gt;我们创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 的文件他的 Deployment 定义非常简单，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们执行如下命令将这个 Deployment 创建到 &lt;code class=&quot;highlighter-rouge&quot;&gt;K3s&lt;/code&gt; 中：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./nginx.yaml
deployment.apps/nginx created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们就可以通过以下命令分别查看集群中创建的 Deployment 和 Pod 的状态：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl get deployment
NAME    READY   UP-TO-DATE   AVAILABLE   AGE
nginx   1/1     1            1           3m14s
➜ kubectl get pod
NAME                    READY   STATUS    RESTARTS   AGE
nginx-cc7df4f8f-r9z6d   1/1     Running   0          3m39s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就完成了一个服务的部署了，是不是非常简单。如果你想部署自己服务，只需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; 修改成你自己的镜像即可，当然 Deployment 中还有其他的字段，这里为了方便大家快速入门，就不会介绍那么多的字段。&lt;/p&gt;

&lt;h3 id=&quot;定义一个-service-来让我们访问-nginx&quot;&gt;定义一个 Service 来让我们访问 Nginx&lt;/h3&gt;

&lt;p&gt;服务部署完了，我们应该如何访问它呢？这里就需要用到 Service，我们先来看看 Service 的定义：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;Service Name&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;Selector Label&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它的定义也非常简单，很容易观察到它需要定义 &lt;code class=&quot;highlighter-rouge&quot;&gt;port&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;targetPort&lt;/code&gt; 用于映射这个服务到目标 Pod 的端口。但是为什么还有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;nodePort&lt;/code&gt; 呢？&lt;/p&gt;

&lt;p&gt;这里就要先介绍以下它的 type 字段，它的可选值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadBalancer&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ClusterIP&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NodePort&lt;/code&gt;，一下子引入太多的概念可能会让大家消化不了。所以为了方便记忆，可以理解为 &lt;code class=&quot;highlighter-rouge&quot;&gt;ClusterIP&lt;/code&gt; 模式时 Service 无法被外部访问，&lt;code class=&quot;highlighter-rouge&quot;&gt;NodePort&lt;/code&gt; 模式时 Service 会在宿主机上映射一个端口供外部访问，&lt;code class=&quot;highlighter-rouge&quot;&gt;LoadBalancer&lt;/code&gt; 模式主要时在使用托管的 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 中云厂商会提供负载均衡器让 Service 供外部访问。&lt;/p&gt;

&lt;p&gt;所以这里我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;NodePort&lt;/code&gt; 模式，当然如果有感兴趣的同学可以自行 Google，这里也同样不做过多的赘述。&lt;/p&gt;

&lt;p&gt;并且注意 Service 中也有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; 字段也是用于关联 Pod，我们将其设置为跟 Pod 的标签相同的值。&lt;/p&gt;

&lt;p&gt;我们同样还是在刚刚的 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件下定义一个 Service 资源，用三个 “-“ 符号隔开：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply&lt;/code&gt; 命令使 Service 生效。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ./nginx.yaml
deployment.apps/nginx unchanged
service/nginx created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后可以通过以下命令观察我们创建的 Service：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl get service
NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          AGE
nginx        NodePort    10.43.67.147   &amp;lt;none&amp;gt;        8080:30080/TCP   7m25s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们通过浏览器尝试访问云服务器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;30080&lt;/code&gt; 端口，记得在云厂商控制台安全组把这个端口打开。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/f1c0e528-780f-424a-aba7-36ef7887c3cd.png&quot; alt=&quot;image1&quot; title=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到成功访问了，就这么简单，将服务。&lt;/p&gt;

&lt;h3 id=&quot;通过-namespace-隔离资源&quot;&gt;通过 Namespace 隔离资源&lt;/h3&gt;

&lt;p&gt;前面有提到 Namespace 资源，在我们日常使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 中，因为会创建非常多的 Deployment 或 Service，当这些这些资源过多时，他们的名称可能重复不便于管理，这里我们就使用 Namespace 将他们隔离开。&lt;/p&gt;

&lt;p&gt;首先我们先通过以下命令将刚刚创建的资源都删除，通过这样的方式可以方便的删除刚刚部署的 nginx：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl delete &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; nginx.yaml 
deployment.apps &lt;span class=&quot;s2&quot;&gt;&quot;nginx&quot;&lt;/span&gt; deleted
service &lt;span class=&quot;s2&quot;&gt;&quot;nginx&quot;&lt;/span&gt; deleted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们在 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.yaml&lt;/code&gt; 文件的头部定义一个 Namespace 资源，它的名称为 `nginx-1`，并且在 Deployment 和 Service 资源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;metadata&lt;/code&gt; 字段添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt; 属性，添加后的完整文件定义如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Namespace&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx-1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;nodePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后 apply 一下这个 yaml 文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl apply  &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; nginx.yaml
namespace/nginx-1 created
deployment.apps/nginx created
service/nginx created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过命令发现我们找不到原来的 Deployment 和 Service：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl get deployment
No resources found.
➜ kubectl get service
No resources found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原因是我们制定了 Namespace 所以需要加上一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;-n nginx-1&lt;/code&gt; 的参数指定 Namespace, 在创建资源未指定 Namespace 时，资源会默认创建在 &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; 的 Namespace 下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜ kubectl get deployment &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; nginx-1
NAME    READY   UP-TO-DATE   AVAILABLE   AGE
nginx   1/1     1            1           2m58s
➜ kubectl get service &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; nginx-1
NAME    TYPE       CLUSTER-IP     EXTERNAL-IP   PORT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          AGE
nginx   NodePort   10.43.22.154   &amp;lt;none&amp;gt;        8080:30080/TCP   3m6s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上就是「K8s 快速上手（一）—— 在云主机上部署我的服务」的全部内容，下一章将会介绍如何在部署的服务中使用配置文件或环境变量配置服务，以及如何挂载存储盘。&lt;/p&gt;</content><author><name>true</name></author><category term="K8s入门教程" /><category term="K8s上手教程" /><category term="K8s" /><summary type="html">由于在工作中使用了 K8s 并且深刻体会到了他带来的便利即好处，但是 K8s 学习还是有一定的门槛。 而且在平常自己做一些开源项目时，或者自己做一些小的服务，由于 K8s 本身需要的 CPU 和内存较高，大部分薅羊毛买的云主机根本没法使用。</summary></entry><entry><title type="html">新一代的微服务架构 Service Mesh</title><link href="https://elfgzp.cn/2020/06/21/%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-service-mesh.html" rel="alternate" type="text/html" title="新一代的微服务架构 Service Mesh" /><published>2020-06-21T01:25:24+00:00</published><updated>2020-06-21T01:25:24+00:00</updated><id>https://elfgzp.cn/2020/06/21/%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-service-mesh</id><content type="html" xml:base="https://elfgzp.cn/2020/06/21/%E6%96%B0%E4%B8%80%E4%BB%A3%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-service-mesh.html">&lt;h1 id=&quot;新一代的微服务架构-service-mesh&quot;&gt;新一代的微服务架构 Service Mesh&lt;/h1&gt;

&lt;p&gt;由于最近在工作中在做 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 的落地项目，有非常多的感触，所以想写一篇文章来分享这个「新一代的微服务架构 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt;」。&lt;/p&gt;

&lt;p&gt;笔者会从以下顺序开始分享：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Part 1 从「单体应用架构」到「微服务架构」开始说起&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Part 2 从「Docker」到 「K8s」&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Part 3 从「边车模式」到「服务网格」&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Part 4 用「Istio Demo」来讲一个实际的应用场景&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先会从 「单体应用架构」 演进到 「微服务架构」 产生的问题开始说起，到自己作为开发人员感触最深的痛点。&lt;/p&gt;

&lt;p&gt;然后简单介绍以下今天的主角 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 的服务编排环境 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;最后从 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 这种设计，说到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt;，最后到我们的主角 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;到正式的主角之前的铺垫会比较多，这是为了让大多数开发者都能理解。&lt;/p&gt;

&lt;p&gt;本文大部分内容都整理自笔者的&lt;strong&gt;学习资料&lt;/strong&gt;加上自己的一些总结和体会，大家最后可以从文末找到他们。&lt;/p&gt;

&lt;h1 id=&quot;part-1单体应用架构到微服务架构开始说起&quot;&gt;Part 1&lt;strong&gt;「单体应用架构」到「微服务架构」开始说起&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;11-单体应用架构与微服务架构对比&quot;&gt;1.1 单体应用架构与微服务架构对比&lt;/h2&gt;

&lt;p&gt;从&lt;strong&gt;「单体」&lt;/strong&gt;到&lt;strong&gt;「分布式」&lt;/strong&gt;演进（也就是微服务化）的原因我相信大家都很了解了。&lt;/p&gt;

&lt;p&gt;因为业务量越来越大，我们需要多台机器才能应对&lt;strong&gt;大规模的应用&lt;/strong&gt;，所以需要&lt;strong&gt;垂直或者水平拆分业务系统&lt;/strong&gt;，让其变成一个&lt;strong&gt;分布式的架构&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2020-06-11-9-24-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上面的表格我们可以看到，分布式系统虽然有一些优势，但也存在一些问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;架构设计变得复杂。&lt;/li&gt;
  &lt;li&gt;部署单个服务会比较快，但是如果一次部署需要多个服务，流程会变得复杂。&lt;/li&gt;
  &lt;li&gt;系统的吞吐量会变大，但是响应时间会变长。&lt;/li&gt;
  &lt;li&gt;运维复杂度会因为服务变多而变得很复杂。&lt;/li&gt;
  &lt;li&gt;架构复杂导致学习曲线变大。&lt;/li&gt;
  &lt;li&gt;测试和查错的复杂度增大。&lt;/li&gt;
  &lt;li&gt;技术多元化，公司中可能会有多个技术栈，这会带来维护和运维的复杂度。&lt;/li&gt;
  &lt;li&gt;管理分布式系统中的服务和调度变得困难和复杂。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作为业务开发人员&lt;strong&gt;最直观的感受&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接口为什么这么慢，明明只依赖了一个服务。我需要更新我的服务，但是哪些服务依赖了我的服务，这次更新会对哪些服务造成影响。&lt;/li&gt;
  &lt;li&gt;我需要在代码&lt;strong&gt;框架层编写客户端接入监控、日志、链路追踪、告警、健康检查等各种各样非业务相关的代码&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;测试很不方便&lt;/strong&gt;，测试一个服务需要所有依赖的服务，测试环境资源紧张。&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;12-微服务架构的痛点和需要解决的问题&quot;&gt;1.2 微服务架构的痛点和需要解决的问题&lt;/h2&gt;

&lt;p&gt;总结来说，微服务架构有这些痛点和需要解决的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务多，服务之间的依赖难以管理。&lt;/li&gt;
  &lt;li&gt;服务之间的版本管理，不同版本的服务可能会有兼容性的问题。&lt;/li&gt;
  &lt;li&gt;需要对整体架构监控，快速发现问题。&lt;/li&gt;
  &lt;li&gt;资源调度管理。&lt;/li&gt;
  &lt;li&gt;需要做流量控制。&lt;strong&gt;负载均衡、服务路由、熔断、降级、限流、灰度发布&lt;/strong&gt;等流量相关的控制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2020-06-11-9-31-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://time.geekbang.org/column/article/1512&quot;&gt;《左耳听风 - 分布式系统技术栈》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;针对这么多的需要去解决和处理的问题。&lt;/p&gt;

&lt;p&gt;引出了我们今天的主角 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在介绍我们今天的主角 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 之前，先简单介绍一下它的服务编排环境 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt;。通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 以及其衍生出来的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 之类的软件或解决方案，大大地降低了做上面很多事情的门槛。&lt;/p&gt;

&lt;h1 id=&quot;part-2docker到-k8s&quot;&gt;Part 2&lt;strong&gt;「Docker」到 「K8s」&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;21-docker-容器的本质&quot;&gt;2.1 Docker 容器的本质&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 相信大家都非常了解了，所以这里我就从 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 过度讲到 &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 容器这个听起来玄而又玄的概念，实际上是在创建容器进程时，指定了这个进程所需要启用的一组 &lt;code class=&quot;highlighter-rouge&quot;&gt;Namespace&lt;/code&gt; 参数。这样，容器就只能&lt;strong&gt;“看”&lt;/strong&gt;到当前 &lt;code class=&quot;highlighter-rouge&quot;&gt;Namespace&lt;/code&gt; 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWPID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们知道，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; 系统中创建线程的系统调用是 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;，就像这样。而当我们用 &lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt; 系统调用创建一个新进程时，就可以在参数中指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLONE_NEWPID&lt;/code&gt; 参数。这时，新创建的这个进程将会&lt;strong&gt;“看到”&lt;/strong&gt;一个全新的进程空间，在这个进程空间里，它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt; 是 &lt;strong&gt;1&lt;/strong&gt;。之所以说&lt;strong&gt;“看到”&lt;/strong&gt;，是因为这只是一个&lt;strong&gt;“障眼法”&lt;/strong&gt;，在宿主机真实的进程空间里，这个进程的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt; 还是真实的数值，比如 &lt;strong&gt;100&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;所以说，容器，其实是一种&lt;strong&gt;特殊的进程&lt;/strong&gt;而已。&lt;/p&gt;

&lt;p&gt;感兴趣的同学可以阅读 &lt;a href=&quot;https://github.com/xianlubird/mydocker&quot;&gt;《自己动手写 Docker》&lt;/a&gt; 和尝试一下书中的代码。&lt;/p&gt;

&lt;h2 id=&quot;22-k8s-最小调度单位-pod&quot;&gt;2.2 K8s 最小调度单位 Pod&lt;/h2&gt;

&lt;p&gt;我花了很多精力去学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; 容器的原理、理解了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 容器的本质，终于, &lt;code class=&quot;highlighter-rouge&quot;&gt;Namespace&lt;/code&gt; 做隔离, &lt;code class=&quot;highlighter-rouge&quot;&gt;Cgroups&lt;/code&gt; 做限制, &lt;code class=&quot;highlighter-rouge&quot;&gt;rootfs&lt;/code&gt; 做文件系统” 这样的“三句箴言”可以朗朗上口了。&lt;/p&gt;

&lt;p&gt;为什么 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 又突然搞出一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 来呢？&lt;/p&gt;

&lt;p&gt;这里提一个概念:  &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt;, 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 项目中最小的 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; 对象。如果换一个更专业的说法，我们可以这样描述: &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 项目的原子调度单位。&lt;/p&gt;

&lt;p&gt;这里通过一个实际的例子来说明：&lt;/p&gt;

&lt;p&gt;我们通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;pstree&lt;/code&gt; 查看操作系统中运行的进程，进程并不是&lt;strong&gt;“孤苦伶仃”&lt;/strong&gt;地独自运行的，而是以进程组的方式，&lt;strong&gt;“有原则地”&lt;/strong&gt;组织在一起。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2020-06-11-9-50-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比如，这里有一个叫作 &lt;code class=&quot;highlighter-rouge&quot;&gt;rsyslogd&lt;/code&gt; 的程序，它负责的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; 操作系统里的日志处理。可以看到, &lt;code class=&quot;highlighter-rouge&quot;&gt;rsyslogd&lt;/code&gt; 的主程序 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, 和它要用到的内核日志模块 &lt;code class=&quot;highlighter-rouge&quot;&gt;imklog&lt;/code&gt; 等，同属于 &lt;code class=&quot;highlighter-rouge&quot;&gt;1632&lt;/code&gt; 进程组。这些进程相互协作，共同完成 &lt;code class=&quot;highlighter-rouge&quot;&gt;rsyslogd&lt;/code&gt; 程序的职责。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果说 「Docker 容器」的其实就是一个「特殊的进程」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那么「K8s」就可以理解成操作系统。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 所做的，其实就是将 &lt;strong&gt;“进程组”&lt;/strong&gt; 的概念映射到了容器技术中，并使其成为了这个云计算 &lt;strong&gt;“操作系统”&lt;/strong&gt; 里的 &lt;strong&gt;“原子调度单位”&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;不过，相信此时你可能会有第二个疑问：&lt;/p&gt;

&lt;p&gt;对于初学者来说，一般都是先学会了用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 这种单容器的工具，才会开始接触 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt;。而如果 Pod 的设计只是出于调度上的考虑，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 项目似乎完全没有必要非得把 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 作为&lt;strong&gt;“原子调度单位”&lt;/strong&gt;吧？&lt;/p&gt;

&lt;p&gt;首先，关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 最重要的一个事实是：它只是一个&lt;strong&gt;逻辑概念&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;具体的说: &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 里的所有容器，共享的是同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Network Namespace&lt;/code&gt;，并且可以声明共享同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Volume&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;那这么来看的话，一个有 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 两个容器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt;，不就是等同于一个容器（容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;）共享另外一个容器（容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;）的网络和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Volume&lt;/code&gt; ？这好像通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --net --volumes-from&lt;/code&gt; 这样的命令就能实现，就像这样。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，你有没有考虑过，如果真这样做的话，容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 就必须比容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 先启动，这样一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 里的多个容器就不是对等关系，而是拓扑关系了。&lt;/p&gt;

&lt;p&gt;所以，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 项目里, &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 的实现需要使用一个中间容器，在这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 中，中间容器永远都是第一个被创建的容器，而其他用户定义的容器，则通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Join Network Namespace&lt;/code&gt; 的方式，与 中间容器关联在一起。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://weread.qq.com/web/reader/f57324607188b37df57c39ek8e232ec02198e296a067180&quot;&gt;《Service Mesh 实战：用 Istio 软负载实现服务网格 3.1.3 Pause 容器》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://time.geekbang.org/column/article/40092&quot;&gt;《深入剖析Kubernetes - 为什么我们需要 Pod》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如上图所示，这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 里有两个用户容器 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;，还有一个中间容器容器。很容易理解，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes&lt;/code&gt; 项目里，中间容器一定要占用极少的资源，所以它使用的是一个非常特殊的镜像，叫作: &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s.gcr.io/pause&lt;/code&gt;。这个镜像是一个用汇编语言编写的、永远处于&lt;strong&gt;“暂停”&lt;/strong&gt;状态的容器，解压后的大小也只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;100~200 KB&lt;/code&gt; 左右。&lt;/p&gt;

&lt;p&gt;这里就不再深入说明了，感兴趣的可以点击图片链接，或者在文章末尾我列出的参考资料。&lt;/p&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 的一个重要的特性，&lt;strong&gt;它的所有容器都共享同一个 Network Namespace&lt;/strong&gt;。这就使得很多与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 网络相关的配置和管理，也都可以交给 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 完成，而完全无须干涉用户容器。&lt;/p&gt;

&lt;p&gt;这里最典型的例子莫过于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 这个微服务治理项目了。&lt;/p&gt;

&lt;p&gt;接下来就从 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 来一步一步介绍 Istio 的设计思想。这里提到的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 到底是什么呢, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 在国内翻译为边车模式，这个翻译真的很形象。&lt;/p&gt;

&lt;h1 id=&quot;part-3边车模式到服务网格&quot;&gt;Part 3「边车模式」到「服务网格」&lt;/h1&gt;

&lt;h2 id=&quot;31-边车模式&quot;&gt;3.1 边车模式&lt;/h2&gt;

&lt;p&gt;所谓的&lt;strong&gt;边车模式&lt;/strong&gt;，对应于我们生活中熟知的边三轮摩托车。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://time.geekbang.org/column/article/5909&quot;&gt;《左耳听风 - 管理设计篇“边车模式”》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可以通过给一个摩托车加上一个边车的方式来扩展现有的服务和功能。这样可以很容易地做到 &lt;strong&gt;“控制 “&lt;/strong&gt; 和 &lt;strong&gt;“逻辑”&lt;/strong&gt; 的分离。&lt;/p&gt;

&lt;p&gt;也就是说，我们不需要在服务中实现控制面上的东西，如&lt;strong&gt;监视、日志记录、限流、熔断、服务注册、协议适配转换&lt;/strong&gt;等这些属于控制面上的东西，而只需要专注地做好和业务逻辑相关的代码，然后，由&lt;strong&gt;“边车”&lt;/strong&gt;来实现这些与业务逻辑没有关系的控制功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://time.geekbang.org/column/article/5909&quot;&gt;《左耳听风 - 管理设计篇“边车模式”》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那最终这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 的效果就会像上图所示。&lt;/p&gt;

&lt;p&gt;那么在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 中, &lt;code class=&quot;highlighter-rouge&quot;&gt;[Envoy](https://github.com/envoyproxy/envoy)&lt;/code&gt; 就是默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt;。它与服务容器在同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt; 中，与服务容器共享同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Network Namespace&lt;/code&gt;，接管所有经过服务容器的流量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://itnext.io/kubernetes-istio-canary-deployment-5ecfd7920e1c&quot;&gt;《Kubernetes Istio Canary Deployment》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;32-服务网格&quot;&gt;3.2 服务网格&lt;/h2&gt;

&lt;p&gt;然后, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 集群就成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt;。图中的&lt;strong&gt;绿色模块是真实的业务应用服务&lt;/strong&gt;，&lt;strong&gt;蓝色模块则是&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt;, 其组成了一个网格。而我们的应用服务完全独立自包含，只需要和本机的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 依赖，剩下的事全交给了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://time.geekbang.org/column/article/5920&quot;&gt;《左耳听风 - 管理设计篇之“服务网格”》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 这个服务网络专注于处理&lt;strong&gt;服务和服务间的通讯&lt;/strong&gt;。其主要负责构造一个稳定可靠的&lt;strong&gt;服务通讯的基础设施&lt;/strong&gt;，并让整个架构更为的先进和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloud Native&lt;/code&gt;。在工程中, &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 基本来说是一组&lt;strong&gt;轻量级的服务代理和应用逻辑的服务&lt;/strong&gt;在一起，并且&lt;strong&gt;对于应用服务是透明的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;说白了，就是下面几个特点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 是一个&lt;strong&gt;基础设施&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 是一个&lt;strong&gt;轻量的服务通讯的网络代理&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 对于应用服务来说是&lt;strong&gt;透明无侵入&lt;/strong&gt;的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 用于&lt;strong&gt;解耦和分离分布式系统架构中控制层面&lt;/strong&gt;上的东西。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-istio-与-service-mesh&quot;&gt;3.3 Istio 与 Service Mesh&lt;/h2&gt;

&lt;p&gt;我们今天的主角 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt;，它的伟大之处不只是在设计本身，&lt;strong&gt;而是在于它是一个兼容并包的生态&lt;/strong&gt;。它为整个行业提供了一种全新的开发及运维的方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;http://zhaohuabing/istio-practice&quot;&gt;zhaohuabing/istio-practice&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;微服务架构在网络链路上还有很多待解决的点，如&lt;strong&gt;链路跟踪、分布式日志、监控报警、压测演练、故障注入&lt;/strong&gt;等。若让 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 官方来实现所有的功能，不仅耗时，还会让整个系统变得非常臃肿。&lt;/p&gt;

&lt;p&gt;接下来就用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 的官方 &lt;code class=&quot;highlighter-rouge&quot;&gt;Demo&lt;/code&gt; 来讲一个实际的应用场景。&lt;/p&gt;

&lt;h1 id=&quot;part-4-用istio-demo来讲一个实际的应用场景&quot;&gt;Part 4 &lt;strong&gt;用「Istio Demo」来讲一个实际的应用场景&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;这部分会用 &lt;a href=&quot;https://istio.io/latest/zh/docs/examples/bookinfo/&quot;&gt;Istio 官方的 Demo&lt;/a&gt; 来演示，所以本文的大部分内容都可以在官方文档中找到。&lt;/p&gt;

&lt;p&gt;如果有感兴趣的同学可以跟着这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Demo&lt;/code&gt; 来实践，但是可能需要一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 集群，这里推荐使用 Google Cloud Platform 的免费试用服务 &lt;a href=&quot;https://cloud.google.com/free&quot;&gt;GCP Free Tier - Free Extended Trials and Always Free&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当然如果想自己折腾搭建 &lt;code class=&quot;highlighter-rouge&quot;&gt;K8s&lt;/code&gt; 集群的同学可以参考笔者的这篇文章 &lt;a href=&quot;https://elfgzp.cn/2020/04/11/k8s-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-kubeadm-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4.html&quot;&gt;「K8s 学习日记」Kubeadm 部署 kubernetes 集群&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是笔者还是建议使用谷歌的服务，体验&lt;strong&gt;云原生&lt;/strong&gt;的方式。&lt;/p&gt;

&lt;h2 id=&quot;41-istio-demobookinfo-应用服务架构&quot;&gt;4.1 Istio Demo「Bookinfo 应用」服务架构&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bookinfo&lt;/code&gt; 应用分为四个单独的微服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;productpage&lt;/code&gt;. 这个微服务会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;details&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;reviews&lt;/code&gt; 两个微服务，用来生成页面。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;details&lt;/code&gt;. 这个微服务中包含了书籍的信息。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reviews&lt;/code&gt;. 这个微服务中包含了书籍相关的评论。它还会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ratings&lt;/code&gt; 微服务。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ratings&lt;/code&gt;. 这个微服务中包含了由书籍评价组成的评级信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reviews&lt;/code&gt; 微服务有 3 个版本：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;v1 版本不会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ratings&lt;/code&gt; 服务。&lt;/li&gt;
  &lt;li&gt;v2 版本会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ratings&lt;/code&gt; 服务，并使用 1 到 5 个黑色星形图标来显示评分信息。&lt;/li&gt;
  &lt;li&gt;v3 版本会调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ratings&lt;/code&gt; 服务，并使用 1 到 5 个红色星形图标来显示评分信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下图展示了这个应用的端到端架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;图片引用自 &lt;a href=&quot;https://istio.io/latest/zh/docs/examples/bookinfo/&quot;&gt;《 ISTIO 文档示例 BOOKINFO 应用》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;42-对-reviews-v2reviews-v3-服务进行测试&quot;&gt;4.2 对 Reviews-v2、Reviews-v3 服务进行测试&lt;/h2&gt;

&lt;p&gt;在实际的应用场景中，我们当前发布了两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Reviews&lt;/code&gt; 服务的 &lt;code class=&quot;highlighter-rouge&quot;&gt;feature&lt;/code&gt; 版本 &lt;code class=&quot;highlighter-rouge&quot;&gt;v2&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;v3&lt;/code&gt; 版本。但是如果需要对这些服务进行测试。&lt;/p&gt;

&lt;p&gt;为了开发人员在测试自己开发的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Review&lt;/code&gt; 服务不受影响，我们可能需要部署多个完整的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookinfo 应用&lt;/code&gt; 即 &lt;code class=&quot;highlighter-rouge&quot;&gt;Product page&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ratings&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Details&lt;/code&gt; 的服务都需要部署，如下图所示 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/istio_bookinfo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;官方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;BookInfo&lt;/code&gt; 中的微服务数量还是比较少的，在实际的场景中，一个完整的系统可能会有成百上千个微服务共同支撑和运行，如果为了开发测试方便就需要庞大的服务器资源提供给微服务进行部署，这也是目前笔者公司的一个痛点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;43-利用-istio-对流量进行控制&quot;&gt;4.3 利用 Istio 对流量进行控制&lt;/h2&gt;

&lt;p&gt;在官方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt; 中，有这样一个例子。&lt;/p&gt;

&lt;p&gt;将来自名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jason&lt;/code&gt; 的用户的所有流量路由到服务 &lt;code class=&quot;highlighter-rouge&quot;&gt;reviews:v2&lt;/code&gt;。将请求头中 &lt;code class=&quot;highlighter-rouge&quot;&gt;end-user&lt;/code&gt; 值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;jason&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;的所有请求指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;reviews:v2&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;正常来说，这样的功能应该需要在具体语言的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt; 框架层进行实现，但是由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt;  的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidecar&lt;/code&gt; 接管了所有的流量，这个功能就在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 中已经集成了。&lt;/p&gt;

&lt;p&gt;对于开发人员来时也就是简单的一个配置和一行命令：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;$ kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;$ kubectl get virtualservice reviews -o yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.istio.io/v1alpha3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;VirtualService&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reviews&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reviews&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;end-user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;exact&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jason&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reviews&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;subset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;reviews&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;subset&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 的流量控制放到实际的应用场景中时，测试环境就只需要一套完整的服务，和一些需要测试的不同版本的服务了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/untitled-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然这只是其中一个应用场景，流量控制还可以用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;A/B&lt;/code&gt; 测试，灰度发布等。并且这只是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 的其中一个功能。&lt;/p&gt;

&lt;p&gt;笔者也不一一去介绍 &lt;code class=&quot;highlighter-rouge&quot;&gt;Istio&lt;/code&gt; 的其他功能了，如：服务安全、链路追踪、网络拓扑、服务注册等等服务治理相关的功能，感兴趣的同学可以阅读官方文档。&lt;/p&gt;

&lt;p&gt;除了官方给出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;demo&lt;/code&gt; ,  感兴趣的同学还可以在这个网站上找到更多的例子，&lt;a href=&quot;https://istiobyexample.dev/&quot;&gt;https://istiobyexample.dev/&lt;/a&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;结尾&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;以上就是笔者想分享的全部内容，在这个云计算时代，笔者相信 &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Mesh&lt;/code&gt; 将会成为微服务架构中的一个佼佼者，帮助我们更好治理微服务架构。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/48&quot;&gt;《左耳听风》陈皓&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/116&quot;&gt;《深入剖析Kubernetes》张磊&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weread.qq.com/web/reader/9fc329507191463c9fcee6d&quot;&gt;《Kubernetes 权威指南：从 Docker 到 Kubernetest 实践全接触（第 4 版）》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://weread.qq.com/web/reader/f57324607188b37df57c39e&quot;&gt;《Service Mesh 实战：用 Istio 软负载实现服务网格》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>true</name></author><category term="Kubernetes" /><category term="K8s" /><category term="ServiceMesh" /><category term="Istio" /><category term="微服务" /><summary type="html">新一代的微服务架构 Service Mesh</summary></entry><entry><title type="html">「K8s 学习日记」Kubeadm 部署 kubernetes 集群</title><link href="https://elfgzp.cn/2020/04/11/k8s-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-kubeadm-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4.html" rel="alternate" type="text/html" title="「K8s 学习日记」Kubeadm 部署 kubernetes 集群" /><published>2020-04-11T01:00:01+00:00</published><updated>2020-04-11T01:00:01+00:00</updated><id>https://elfgzp.cn/2020/04/11/%E3%80%8Ck8s-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%E3%80%8Dkubeadm-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4</id><content type="html" xml:base="https://elfgzp.cn/2020/04/11/k8s-%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-kubeadm-%E9%83%A8%E7%BD%B2-kubernetes-%E9%9B%86%E7%BE%A4.html">&lt;p&gt;最近在学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetest&lt;/code&gt; 但是 Google 上有非常多的教程关于如何部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;原本是想在自己买的 &lt;code class=&quot;highlighter-rouge&quot;&gt;JD&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;HUAWEI&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECS&lt;/code&gt; 上面部署的，但是折腾了很久无果。无奈还是选用同一个云服务商提供的 ECS，在同一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;VPC&lt;/code&gt; 的条件下部署会更方便。&lt;/p&gt;

&lt;p&gt;本文中的所有脚本均可以在这里找到 &lt;a href=&quot;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140&quot;&gt;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;ecs-配置选择&quot;&gt;ECS 配置选择&lt;/h2&gt;

&lt;p&gt;由于只是学习，笔者就不部署高可用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt; 集群了，所以准备一台 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点。&lt;/p&gt;

&lt;p&gt;由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 至少需要 2 个 CPU 核心。这里选择了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vultr&lt;/code&gt; 上 &lt;code class=&quot;highlighter-rouge&quot;&gt;2 核 4G 内存&lt;/code&gt; 配置的 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECS&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/wx20200411-125004-2x.png&quot; alt=&quot;2c4g&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点配置当然是内存越大越好，当然只是处于学习的目的，这里就选择与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 相同的配置。&lt;/p&gt;

&lt;p&gt;国外的云服务厂商一般是没有带宽限制的，一般是按照流量计算的，这个配置有 &lt;code class=&quot;highlighter-rouge&quot;&gt;3T&lt;/code&gt; 的流量是肯定够的。&lt;/p&gt;

&lt;p&gt;然后他的收费模式是按小时计算的这个配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.03 $ / h&lt;/code&gt; 相当于 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.21 ¥ / h&lt;/code&gt;，也就是每小时两毛钱！就算你用一天也就四块钱。&lt;/p&gt;

&lt;p&gt;笔者打算在学习 &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt; 的时候在部署两个实例，不用了直接销毁，岂不美哉。&lt;/p&gt;

&lt;p&gt;新用户的话还能免费到账 &lt;code class=&quot;highlighter-rouge&quot;&gt;100 $&lt;/code&gt; ，这里是邀请的连接 &lt;a href=&quot;https://www.vultr.com/?ref=8382877-6G&quot;&gt;Vultr Give $100&lt;/a&gt;，要是觉得还不错的话可以试试，笔者是真的觉得他们的服务还不错，所以给他们打个广告。&lt;/p&gt;

&lt;p&gt;这里选择两个 &lt;code class=&quot;highlighter-rouge&quot;&gt;CentOS 7 Without SELinux&lt;/code&gt; 的实例。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELinux&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; 下的一个安全相关的软件，为了方便学习和部署，我们直接关闭它，所以选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;Without SELinux&lt;/code&gt; 就准备开始部署了。&lt;/p&gt;

&lt;p&gt;注意在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Additional Features&lt;/code&gt; 处勾选 &lt;code class=&quot;highlighter-rouge&quot;&gt;Enable Private Networking&lt;/code&gt;，让 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vultr&lt;/code&gt; 为你的服务器分配内网 &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;设置好两个节点的 &lt;code class=&quot;highlighter-rouge&quot;&gt;HostName&lt;/code&gt; 防止待会节点名称冲突。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/wx20200411-160357-2x.png&quot; alt=&quot;hostname&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy Now&lt;/code&gt; 之前将 &lt;code class=&quot;highlighter-rouge&quot;&gt;Servers Qty&lt;/code&gt; 增加为 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt; ，这样就不用反复打开部署页面了，直接部署两个实例。&lt;/p&gt;

&lt;p&gt;别被这 &lt;code class=&quot;highlighter-rouge&quot;&gt;$20.00 /mo&lt;/code&gt; 吓到了，这是每月 &lt;code class=&quot;highlighter-rouge&quot;&gt;$20&lt;/code&gt;，我们只需要用完了及时销毁就好，而且新用户赠送的 &lt;code class=&quot;highlighter-rouge&quot;&gt;100$&lt;/code&gt; 可以用很久了。&lt;/p&gt;

&lt;h2 id=&quot;ecs-环境配置&quot;&gt;ECS 环境配置&lt;/h2&gt;

&lt;p&gt;部署完成两个实例后，就可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Instances&lt;/code&gt; 列表找到他们。  （考虑到没有使用过云服务的读者，这里笔者讲详细一点。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/wx20200411-132424-2x.png&quot; alt=&quot;ins2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在点进这个实例可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Overview&lt;/code&gt; 找到他的登录账号密码，默认用户是 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; 可以看到这两个实例的内网 &lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这里笔者的两个实例的内网如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;实例&lt;/th&gt;
      &lt;th&gt;核心数&lt;/th&gt;
      &lt;th&gt;内存&lt;/th&gt;
      &lt;th&gt;内网 IP&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Master&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4G&lt;/td&gt;
      &lt;td&gt;10.24.96.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Node&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;4G&lt;/td&gt;
      &lt;td&gt;10.24.96.4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接下来就正式开始了，不过 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 进入系统后还需要做一些准备工作。&lt;/p&gt;

&lt;h2 id=&quot;k8s-部署准备工作&quot;&gt;K8s 部署准备工作&lt;/h2&gt;

&lt;p&gt;首先避免不必要的麻烦，先关闭 &lt;code class=&quot;highlighter-rouge&quot;&gt;CentOS 7&lt;/code&gt; 的防火墙，因为本身云服务厂商会有安全组，我们也可以通过配置安全组来实现网络安全防护。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable firewalld &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl stop firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若是前面在部署实例的时候没有选择 &lt;code class=&quot;highlighter-rouge&quot;&gt;Without SELinux&lt;/code&gt; 这里则需要让容器可以访问主机文件，需要输入以下命令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将 SELinux 设置为 permissive 模式（相当于将其禁用）&lt;/span&gt;
setenforce 0
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^SELINUX=enforcing$/SELINUX=permissive/'&lt;/span&gt; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们还需要关闭 swap，至于为什么感兴趣可以去搜一下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swapoff &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确保在 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl&lt;/code&gt; 配置中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;net.bridge.bridge-nf-call-iptables&lt;/code&gt; 被设置为 1。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确保已加载了 &lt;code class=&quot;highlighter-rouge&quot;&gt;br_netfilter&lt;/code&gt; 模块。这可以通过运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;lsmod | grep br_netfilter&lt;/code&gt; 来完成。要显示加载它，请调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;modprobe br_netfilter&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;modprobe br_netfilter
lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;br_netfilter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; docker
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;笔者已经将上述步骤做成了脚本，可以查看 &lt;a href=&quot;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140#file-vultr_k8s_prepare-sh&quot;&gt;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140#file-vultr_k8s_prepare-sh&lt;/a&gt;。 为了快速进入下一步可以执行以下命令直接跳过准备操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://gist.githubusercontent.com/elfgzp/02485648297823060a7d8ddbafebf140/raw/781c2cd7e6dba8f099e2b6b1aba9bb91d9f60fe2/vultr_k8s_prepare.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装-kubeadm&quot;&gt;安装 Kubeadm&lt;/h2&gt;

&lt;p&gt;接下来的步骤可以完全参考官方文档来了，&lt;a href=&quot;https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&quot;&gt;官方文档链接&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置 yum 源&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 安装 kubelet kubeadm kubectl&lt;/span&gt;
yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubelet kubeadm kubectl &lt;span class=&quot;nt&quot;&gt;--disableexcludes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes

&lt;span class=&quot;c&quot;&gt;# 启动 kubelet&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vultr&lt;/code&gt; 是国外的云主机，所以我们根本不用考虑 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google&lt;/code&gt; 的访问问题，但是如果是国内的主机需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt; 源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt; 修改为以下配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kuebrnetes]
name=KubernetesRepository
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=0
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上述操作的脚本，&lt;a href=&quot;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140#file-vultr_k8s_install_kubeadm-sh&quot;&gt;https://gist.github.com/elfgzp/02485648297823060a7d8ddbafebf140#file-vultr_k8s_install_kubeadm-sh&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://gist.githubusercontent.com/elfgzp/02485648297823060a7d8ddbafebf140/raw/#/vultr_k8s_prepare.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用-kubeadm-创建-k8s-集群&quot;&gt;使用 Kubeadm 创建 k8s 集群&lt;/h2&gt;

&lt;h3 id=&quot;创建-k8s-master-节点&quot;&gt;创建 k8s Master 节点&lt;/h3&gt;

&lt;p&gt;我们首先要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 的实例上执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt;。但是我们先使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm config print init-defaults&lt;/code&gt; 来看看它的默认初始化文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config print init-defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来直接执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm init&lt;/code&gt; 进行初始化。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然你也可以生成一个配置文件后，指定配置文件进行初始化：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config print init-defaults &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; kubeadm.yaml
&lt;span class=&quot;c&quot;&gt;# 修改 kubeadm.yml&lt;/span&gt;
kubeadm init &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;国内的主机可能需要修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;imageRepository&lt;/code&gt; 的配置，来修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt; 的镜像仓库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; kubeadm.yaml
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
    extraArgs:
        runtime-config: &quot;api/all=true&quot;
kubernetesVersion: &quot;v1.18.1&quot;
imageRepository: registry.aliyuncs.com/google_containers
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubeadm init &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果初始化失败可以执行以下命令，进行重制：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm reset
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/lib/cni/
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/kubernetes/
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /etc/cni/
ifconfig cni0 down
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;delete cni0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行完成后，我们会得到以下输出：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join {你的IP}:6443 --token 3prn7r.iavgjxcmrlh3ust3 \
    --discovery-token-ca-cert-hash sha256:95283a2e81464ba5290bf4aeffc4376b6d708f506fcee278cd2a647f704ed55d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按照他的提示，我们将 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 的配置放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.kube/config&lt;/code&gt; 下，注意每次执行完成 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm init&lt;/code&gt; 之后，配置文件都会变化，所以需要重新复制。&lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 还会输出 join 命令的配置信息，用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 加入集群。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你们是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 用户的话，可以直接利用环境变量指定配置文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export KUBECONFIG=/etc/kubernetes/admin.conf'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get nodes&lt;/code&gt; 来查看节点的状态：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME      STATUS   ROLES    AGE     VERSION
master1   NotReady    master   6m52s   v1.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时的状态为 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotReady&lt;/code&gt; 当然这个状态是对的，因为我们还没有安装网络插件。接下来安装网络插件，这里是用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Weave&lt;/code&gt; 网络插件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://cloud.weave.works/k8s/net?k8s-version=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl version | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有其他的网络插件可以参考官方文档，&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network&quot;&gt;Installing a Pod network add-on&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;可以通过查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt; 状态查看是否安装成功：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
NAMESPACE     NAME                       READY   STATUS    RESTARTS   AGE
kube-system   coredns-66bff467f8-br94l   1/1     Running   0          14m
kube-system   coredns-66bff467f8-pvsfn   1/1     Running   0          14m
kube-system   kube-proxy-b2phr           1/1     Running   0          14m
kube-system   weave-net-8wv4k            2/2     Running   0          2m2s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果发现 &lt;code class=&quot;highlighter-rouge&quot;&gt;STATUS&lt;/code&gt; 不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Running&lt;/code&gt; 可以通过，&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl logs&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl describe&lt;/code&gt; 命令查看详细的错误信息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl logs weave-net-8wv4k &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system weave
kubectl logs weave-net-8wv4k &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system weave-npc
kubectl describe pods weave-net-8wv4k &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 节点状态就变为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready&lt;/code&gt; 了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME      STATUS   ROLES    AGE     VERSION
master1   Ready    master   6m52s   v1.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;部署-node-节点&quot;&gt;部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点&lt;/h3&gt;

&lt;p&gt;部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点同样需要「准备阶段」的工作，这里就不一一讲解了，直接执行脚本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://gist.githubusercontent.com/elfgzp/02485648297823060a7d8ddbafebf140/raw/781c2cd7e6dba8f099e2b6b1aba9bb91d9f60fe2/vultr_k8s_prepare.sh | sh
curl https://gist.githubusercontent.com/elfgzp/02485648297823060a7d8ddbafebf140/raw/781c2cd7e6dba8f099e2b6b1aba9bb91d9f60fe2/vultr_k8s_install_kubeadm.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们需要执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 节点初始化后输出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; 命令。如果不记得了，可以通过在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 执行以下命令重新获得 &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; 命令。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm token create &lt;span class=&quot;nt&quot;&gt;--print-join-command&lt;/span&gt;
kubeadm &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;你的IP&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; m239ha.ot52q6goyq0pcadx     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:95283a2e81464ba5290bf4aeffc4376b6d708f506fcee278cd2a647f704ed55d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若加入时出现问题同样可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm rest&lt;/code&gt; 来重置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然 &lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt; 命令也是可以提供配置文件的，我们只需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 上执行以下命令就可以生成默认配置文件了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config print join-defaults &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; kubeadm-join.yaml
kubeadm &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm-join.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再次通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;nodes&lt;/code&gt; 状态，如果希望在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点上执行的话，需要将 &lt;code class=&quot;highlighter-rouge&quot;&gt;Master&lt;/code&gt; 上的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes/admin.conf&lt;/code&gt; 复制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 节点上。&lt;/p&gt;

&lt;p&gt;接下来我们验证 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 的状态为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready&lt;/code&gt; 则加入成功：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get nodes
NAME      STATUS   ROLES    AGE     VERSION
master1   Ready    master   6m52s   v1.18.1
node1     Ready    &amp;lt;none&amp;gt;   29s     v1.18.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上就是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Vultr&lt;/code&gt; 上使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 部署 &lt;code class=&quot;highlighter-rouge&quot;&gt;k8s&lt;/code&gt; 集群的所有过程啦，当然也是踩了很多坑。特别是想在不同的云主机上部署，最终还是选择使用同一个云服务商的 ECS。&lt;/p&gt;

&lt;h2 id=&quot;参考文档&quot;&gt;参考文档&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://weread.qq.com/web/reader/9fc329507191463c9fcee6d&quot;&gt;Kubernetes权威指南：从Docker到Kubernetes实践全接触（第4版）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/100015201&quot;&gt;深入剖析Kubernetes&lt;/a&gt;&lt;/p&gt;</content><author><name>true</name></author><category term="K8s" /><category term="Kubernetes" /><category term="Vultr" /><summary type="html">最近在学习 kubernetest 但是 Google 上有非常多的教程关于如何部署 kubernetes。</summary></entry><entry><title type="html">为你的 Github 博客加个 CMS -「内容管理」</title><link href="https://elfgzp.cn/2020/03/21/%E4%B8%BA%E4%BD%A0%E7%9A%84-github-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%AA-cms-%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86.html" rel="alternate" type="text/html" title="为你的 Github 博客加个 CMS -「内容管理」" /><published>2020-03-21T01:05:43+00:00</published><updated>2020-03-21T01:05:43+00:00</updated><id>https://elfgzp.cn/2020/03/21/%E4%B8%BA%E4%BD%A0%E7%9A%84-github-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%AA-cms-%E3%80%8C%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E3%80%8D</id><content type="html" xml:base="https://elfgzp.cn/2020/03/21/%E4%B8%BA%E4%BD%A0%E7%9A%84-github-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%AA-cms-%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86.html">&lt;h1 id=&quot;github-博客内容管理解决方案---netlifycms&quot;&gt;Github 博客内容管理解决方案 - 「netlifycms」&lt;/h1&gt;

&lt;p&gt;在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 作为博客很长一段时间在发愁，主要是有以下几个痛点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次写文章都要打开编辑器，感觉自己不是在写文章而是在写代码&lt;/li&gt;
  &lt;li&gt;写完只是想打个草稿，都要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; 提交以下更改，更像写代码了&lt;/li&gt;
  &lt;li&gt;不能随时随地的编辑，有时候我想用 ipad 修改点什么都不可以&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于以上几个痛点，每次写 Blog 感觉自己都需要费很大的力气，还不如自己写个笔记就过去了。&lt;/p&gt;

&lt;p&gt;但是有些好的东西总是要分享出来才会有价值啊，于是我开始寻找 Github Blog 的 CMS 解决方案。&lt;/p&gt;

&lt;p&gt;先来一张效果图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/elfgzp_admin.gif&quot; alt=&quot;blog_admin&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;netlifycms-与-jekyll-admin-的对比&quot;&gt;netlifycms 与 jekyll-admin 的对比&lt;/h2&gt;

&lt;p&gt;刚开始我找到的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-admin&lt;/code&gt; 这款 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMS&lt;/code&gt;，因为本人用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;。但是发现这款 &lt;code class=&quot;highlighter-rouge&quot;&gt;jeklly&lt;/code&gt; 还需要一台服务器，也就是他编辑的只是服务器上的文件。&lt;/p&gt;

&lt;p&gt;当初选择使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 作为 Blog 就是想在没有个人服务器的情况下 Blog 依然能工作。虽然目前是利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; 部署在自己的服务器上方便国内的搜索引擎爬虫进行爬取，目的是优化 &lt;code class=&quot;highlighter-rouge&quot;&gt;SEO&lt;/code&gt;，提高国内的访问速度。但是还是想要一个不需要自己部署后端的 CMS。&lt;/p&gt;

&lt;p&gt;于是我就找到了 netlifycms，经过配置完后我大概了解了他的工作原理。&lt;/p&gt;

&lt;p&gt;首先你的 CMS admin 页面是跟你博客一起部署在 Github 上面的，admin 的权限则是通过 Github OAuth 来控制的。在你修改了页面之后，会通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; 提交给 &lt;code class=&quot;highlighter-rouge&quot;&gt;netlify&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;netlify&lt;/code&gt; 会通过 Github OAuth 获取的权限来在你修改了文章之后帮你做 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 的操作，大概的原理图如下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/netlifycms.png&quot; alt=&quot;netlifycms&quot; /&gt;&lt;/p&gt;

&lt;p&gt;废话不多说，我们跟着官方文档开始吧。&lt;/p&gt;

&lt;h2 id=&quot;为你的博客添加-netlifycms&quot;&gt;为你的博客添加 netlifycms&lt;/h2&gt;

&lt;p&gt;由于本人用的是 jeklly 博客，文章中的演示部分均为 jeklly。当然 netlifycms 不只支持 jeklly，还支持很多其他类型的 Blog。如果是其他类型的 Blog 可以参考&lt;a href=&quot;https://www.netlifycms.org/docs/intro/&quot;&gt;官方文档&lt;/a&gt;的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Guides&lt;/code&gt;，不过应该都是大同小异的，不过建议对比本片文章来配置，如何创建 Oauth 应用可以参考本文，因为官方文档没有讲的太详细。&lt;/p&gt;

&lt;p&gt;当然开始之前你需要有一个已经部署好的博客，没有部署好的可以参考 &lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/01-setup/&quot;&gt;jeklly 的部署指引文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;增加-adminindexhtml-文件&quot;&gt;增加 admin/index.html 文件&lt;/h3&gt;

&lt;p&gt;创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/index.html&lt;/code&gt; 在你的仓库根目录下，这个文件内容看起来像这样。注意官方文档中并没有添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;netlify-identity-widget.js&lt;/code&gt; 这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; ，这个是用来校验你的身份的，需要加上。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- admin/index.html --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://identity.netlify.com/v1/netlify-identity-widget.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Content Manager&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Include the script that builds the page and powers Netlify CMS --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/netlify-cms@^2.0.0/dist/netlify-cms.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以参考我的仓库文件，&lt;a href=&quot;https://github.com/elfgzp/elfgzp.cn/blob/master/admin/index.html&quot;&gt;https://github.com/elfgzp/elfgzp.cn/blob/master/admin/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后在你的首页的 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; 增加一段 &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; 代码。这段代码的作用是在你登录你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;cms&lt;/code&gt; admin 页面之后，&lt;code class=&quot;highlighter-rouge&quot;&gt;netlify-identity-widget.js&lt;/code&gt; 会将你重定向到首页，然后这段代码会把你带回 admin 页面。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netlifyIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netlifyIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netlifyIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/admin/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/header&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;增加一个-adminconfigyml-文件&quot;&gt;增加一个 admin/config.yml 文件&lt;/h3&gt;

&lt;p&gt;同样在仓库根目录下创建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin/config.yml&lt;/code&gt; 文件，这个文件内容看起来是这样。注意官方文档中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;backend:name&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;git-gateway&lt;/code&gt; ，我们需要修改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 默认是 master 分支&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;media_folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;assets/uploads'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;blog'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Blog'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_posts/'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 这里这些字段对应到你写文章的 markdown 上方的一些文章属性 widget 的配置可以参考官方文档的 widget 部分&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Layout&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;layout&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hidden&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Title&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;title&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tagname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;h1&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Date&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;date&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;datetime&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;YYYY-MM-DD&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hh:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tags&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tags&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;string&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Body&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;markdown&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以参考我的仓库文件，&lt;a href=&quot;https://github.com/elfgzp/elfgzp.cn/blob/master/admin/config.yml&quot;&gt;https://github.com/elfgzp/elfgzp.cn/blob/master/admin/config.yml&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;在-netlify-配置好你的仓库&quot;&gt;在 netlify 配置好你的仓库&lt;/h3&gt;

&lt;p&gt;在使用 Github 账号登录了 &lt;code class=&quot;highlighter-rouge&quot;&gt;netlify&lt;/code&gt; 后，点击 「New site from Git」，如果搜索不到的话记得给你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;netlify&lt;/code&gt; 授权访问你的仓库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/create_a_new_site.png&quot; alt=&quot;create_a_new_site&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟着指引创建，注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 这个部分如果你有别的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; 可以将他的 &lt;code class=&quot;highlighter-rouge&quot;&gt;build command&lt;/code&gt; 去掉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/create_a_new_site_2.png&quot; alt=&quot;create_a_new_site_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建完成后，你就会在你的网站列表里面看到你的网站了。如果你有自己的域名，需要到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Site Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Domain Management&lt;/code&gt; 设置你的个人域名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/domain_management.png&quot; alt=&quot;domain_management&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置-oauth-app&quot;&gt;配置 Oauth App&lt;/h3&gt;

&lt;p&gt;上面几个步骤完成后，将修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 到仓库，你已经可以在你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;admin&lt;/code&gt; 页面看到一些东西了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/login.png&quot; alt=&quot;login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是这个时候你点击登录肯定是登录不了的，我们还需要配置一个 Oauth App。&lt;/p&gt;

&lt;p&gt;首先打开你的 Github 页面，依次按步骤 &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Developer settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Oauth Apps&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;New Oauth App&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;按照下图填好你的 Blog 信息，注意 &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization callback URL&lt;/code&gt; 需要填 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://api.netlify.com/auth/done&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/oauth_app_1.png&quot; alt=&quot;oauth_app_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后复制好你的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Oauth Client ID&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Oauth Client Secret&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/oauth_app_2.png&quot; alt=&quot;oauth_app_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;netlify&lt;/code&gt;到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Site Settings&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Access control&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Oauth - install provider&lt;/code&gt;，将复制的信息粘贴进去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/oauth_app_3.png&quot; alt=&quot;oauth_app_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成上面的步骤就大功告成了，你就可以登录你的 Blog Admin 管理你的文章了。&lt;/p&gt;

&lt;h2 id=&quot;使用技巧&quot;&gt;使用技巧&lt;/h2&gt;

&lt;p&gt;这里有一些使用的技巧想分享一下。&lt;/p&gt;

&lt;h3 id=&quot;新建一个-cms-分支用来打草稿&quot;&gt;新建一个 CMS 分支用来打草稿&lt;/h3&gt;

&lt;p&gt;因为本人加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; 所以 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; 之后就会更新了，这样就不能打草稿了，所以我开了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;cms&lt;/code&gt; 的分支。文章保存后都会 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt; 到这个分支上，等你需要发布的时候在提交 &lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt; 到 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cms&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 默认是 master 分支&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;markdown-效果预览&quot;&gt;Markdown 效果预览&lt;/h3&gt;

&lt;p&gt;netlifycms 的 Markdown 预览非常的丑，我直接把他关了，代替预览的方案就是切换编辑框的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rich Text&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 模式。&lt;/p&gt;

&lt;h3 id=&quot;在文章中添加图片&quot;&gt;在文章中添加图片&lt;/h3&gt;

&lt;p&gt;肯定有读者注意到了在增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;![]()&lt;/code&gt; 的 Markdown 图片标签后，切换到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rich Text&lt;/code&gt; 就可以选择上传图片了。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上就是为 Github 增加 CMS 的解决方案，如果有什么问题或者有更好的解决方案，可以在下方留言。&lt;/p&gt;</content><author><name>true</name></author><category term="netlifycms" /><category term="博客" /><category term="CMS" /><category term="Github" /><summary type="html">Github 博客内容管理解决方案 - 「netlifycms」</summary></entry><entry><title type="html">Github 上的个人项目开源心得</title><link href="https://elfgzp.cn/2019/12/09/gortal-site-project.html" rel="alternate" type="text/html" title="Github 上的个人项目开源心得" /><published>2019-12-09T14:00:00+00:00</published><updated>2019-12-09T14:00:00+00:00</updated><id>https://elfgzp.cn/2019/12/09/gortal-site-project</id><content type="html" xml:base="https://elfgzp.cn/2019/12/09/gortal-site-project.html">&lt;p&gt;由于最近在 Github 发了一个个人开源项目 - &lt;a href=&quot;https://github.com/TNK-Studio/gortal&quot;&gt;「gortal」一个使用 Go 语言开发的，超级轻量的堡垒机（跳板机）服务&lt;/a&gt;，于是想写一篇博文来记录一下自己的开源心得。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/gortal.gif&quot; alt=&quot;gortal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;虽然不是第一次写开源项目了，但是不能放过这次写博文的热情，下一次就不知道啥时候写了。&lt;/p&gt;

&lt;p&gt;而且这篇文章的主要目的也是想分享一些开源的心得给读者们。&lt;/p&gt;

&lt;h2 id=&quot;产生-idea-&quot;&gt;产生 Idea 💡&lt;/h2&gt;

&lt;p&gt;首先不管是个人项目还是开源项目都得有一个 Idea，我先来说说 &lt;code class=&quot;highlighter-rouge&quot;&gt;gortal&lt;/code&gt; 这个项目的 idea 是怎么来的。&lt;/p&gt;

&lt;p&gt;笔者有一群热爱开源技术的小伙伴们，&lt;a href=&quot;https://github.com/TNK-Studio/gortal&quot;&gt;TNK-Studio&lt;/a&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;technical studio&lt;/code&gt; 技术小作坊。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mayneyao&quot;&gt;@mayneyao&lt;/a&gt; 同学的开源项目 &lt;a href=&quot;https://github.com/TNK-Studio/zh-independent-blog-research&quot;&gt;中文独立博客调研&lt;/a&gt; 需要服务器来跑爬虫，于是我们便将手上的闲置云计算资源都贡献出来。&lt;/p&gt;

&lt;p&gt;我想了想没准以后还会有这样的需求，于是想到了公司使用的 &lt;a href=&quot;https://github.com/jumpserver/jumpserver&quot;&gt;jumpserver 堡垒机&lt;/a&gt;，想在组织的其中一个服务器搭起来。&lt;/p&gt;

&lt;p&gt;于是就 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 一把梭，两三下就跑起来了。&lt;/p&gt;

&lt;p&gt;结果就是，服务器卡死了 …&lt;/p&gt;

&lt;p&gt;去 &lt;code class=&quot;highlighter-rouge&quot;&gt;jumpserver&lt;/code&gt; 的官方文档看了一眼。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Jumpserver 环境要求：&lt;br /&gt;
硬件配置: 2个CPU核心, 4G 内存, 50G 硬盘（最低）&lt;br /&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/ni-rang-wo-shuo-dian-shen-me-hao.jpeg&quot; alt=&quot;ni-rang-wo-shuo-dian-shen-me-hao&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们闲置的云计算资源基本都是 &lt;code class=&quot;highlighter-rouge&quot;&gt;1 核 2 G&lt;/code&gt; 的配置，这配置要求玩不起呀。&lt;/p&gt;

&lt;p&gt;然后搜了一下有没有其他同类型的，轻量一点的项目能拿来用，最后也是没有找到合适的。&lt;/p&gt;

&lt;h2 id=&quot;自己来造-&quot;&gt;自己来造 🔧&lt;/h2&gt;

&lt;p&gt;既然没有，那就自己来造！&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Idea&lt;/code&gt; 有了，就差程序员了，现在程序员也不缺了，就差用啥语言了。  这时候肯定是选世界上最好的语言 P ..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/kan-zhe-wo-de-dao.jpeg&quot; alt=&quot;kan-zhe-wo-de-dao&quot; /&gt;&lt;/p&gt;

&lt;p&gt;刚开始想考虑使用自己的本命语言 &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt;，但是后来考虑到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; 语言相比之下部署简单，而且不管是生成的可执行程序还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 镜像都非常的小，于是果断选择了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;那么应该做成什么样子的呢，因为体验过了 &lt;code class=&quot;highlighter-rouge&quot;&gt;jumpserver&lt;/code&gt; 的终端交互的模式，所以也想开发成相同的方式。当然为了轻量，肯定是抛弃了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;，完全使用终端来交互。&lt;/p&gt;

&lt;p&gt;接下来就是开源的轮子选择了，当然在实现你的 Idea 的时候切忌从头到位自己做，如果有优秀的开源方案一定要拿来用，如果不满足自己的需求在针对其进行修改。在使用其中一个开源项目 &lt;a href=&quot;https://github.com/manifoldco/promptui&quot;&gt;manifoldco/promptui&lt;/a&gt; 的时候就发现不满足需求的地方，这时候就可以 fork 一份到自己的仓库，自己改了自己用。&lt;/p&gt;

&lt;p&gt;最终根据技术方案选择的轮子如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;终端交互 - &lt;a href=&quot;https://github.com/manifoldco/promptui&quot;&gt;manifoldco/promptui&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sshd 服务开发 - &lt;a href=&quot;github.com/gliderlabs/ssh&quot;&gt;gliderlabs/ssh&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ssh 中转客户端 - &lt;a href=&quot;&amp;quot;github.com/helloyi/go-sshclient&amp;quot;&quot;&gt;helloyi/go-sshclient&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他个人开源项目 - &lt;a href=&quot;github.com/fatih/color&quot;&gt;fatih/color&lt;/a&gt;、&lt;a href=&quot;github.com/op/go-logging&quot;&gt;op/go-logging&lt;/a&gt; 等等&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;项目-to-do-&quot;&gt;项目 To-do 📝&lt;/h2&gt;

&lt;p&gt;啥都选好了，准备开始动手了，却发现我该从哪里开始好呢？&lt;/p&gt;

&lt;p&gt;这时候就需要列一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;To-do&lt;/code&gt; 了，笔者使用的是 &lt;a href=&quot;https://www.notion.so/?r=617c987258674dbb9fc8d31f1dcc0b9d&quot;&gt;notion&lt;/a&gt; 的笔记工具。使用看板将项目各个待实现的功能列出来，实现完一个将其拖入完成项中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/notion.gif&quot; alt=&quot;notion-gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样不仅仅是自己可以梳理当前需要做的，而且在多人协作开发也非常有帮助。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/?r=617c987258674dbb9fc8d31f1dcc0b9d&quot;&gt;Notion&lt;/a&gt; 牛批！！！&lt;/p&gt;

&lt;p&gt;准备好 To-do 就可以正式开工了，当功能完成得差不多的时候，才是正式开始的时候。&lt;/p&gt;

&lt;h2 id=&quot;加个-ci-️&quot;&gt;加个 CI ⚙️&lt;/h2&gt;

&lt;p&gt;基础功能做好了，准备发布 &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; 了，&lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; 开发的程序只需要打包成不同平台的二进制可执行文件就可以了。&lt;/p&gt;

&lt;p&gt;但是那么多平台，一个一个的手动 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; 然后上传，这哪是程序员干的事，这是 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; - 持续集成（Continuous integration，简称CI）要干的事情。&lt;/p&gt;

&lt;p&gt;在开发这个项目之前，有使用过 &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt;，它对 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 开源项目是免费的。  但是前一段时间 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 推出了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Actions&lt;/code&gt; 于是抱着尝尝鲜的态度就选择了它。&lt;/p&gt;

&lt;p&gt;它使用起来也非常的简单，点击仓库上方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt; 菜单就可以进入仓库的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt; 配置页面。&lt;/p&gt;

&lt;p&gt;笔者在使用过程中觉得 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Actions&lt;/code&gt; 跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;Travis CI&lt;/code&gt; 相比，其最大的优势是它的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Marketplace&lt;/code&gt;，里面有非常多开源的别人写好的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt;，可以直接拿来简单修改后使用，而且这些 &lt;code class=&quot;highlighter-rouge&quot;&gt;Actions&lt;/code&gt; 当然也是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 进行版本管理的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/github-actions.gif&quot; alt=&quot;github-actions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如何使用这里就不做详细介绍了，感兴趣的可以查看 &lt;a href=&quot;https://help.github.com/en/actions/automating-your-workflow-with-github-actions&quot;&gt;Github Actions 官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这里我给仓库添加了一个「创建 Release」就自动打包所有镜像的 &lt;code class=&quot;highlighter-rouge&quot;&gt;actions&lt;/code&gt;，它的仓库地址我也放在这里 &lt;a href=&quot;https://github.com/ngs/go-release.action&quot;&gt;ngs/go-release.action&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;最后它的效果就是自动帮你打包所有平台的二进制可执行程序，并压缩上传到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/github-release.png&quot; alt=&quot;github-release&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;来个-docker-镜像-&quot;&gt;来个 Docker 镜像 🐳&lt;/h2&gt;

&lt;p&gt;当然一个服务怎么少的了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 镜像，还不了解 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 的同学可以看看&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html&quot;&gt;阮一峰的 Docker 入门教程&lt;/a&gt;，笔者觉得 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 简直就是 21 世纪程序员最伟大的发明之一。&lt;/p&gt;

&lt;p&gt;而且官方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 结合使用简直不能再香。&lt;/p&gt;

&lt;p&gt;不需要写额外的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github Actions&lt;/code&gt; 配置或其他的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CI&lt;/code&gt; 配置文件，你只需要将你的仓库与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt; 仓库关联起来，当然不要忘了在你的仓库放 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 文件。&lt;/p&gt;

&lt;p&gt;然后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt; 仓库配置好自动构建镜像的逻辑，就大功告成了。&lt;/p&gt;

&lt;p&gt;而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Hub&lt;/code&gt; 的配置指引也做的非常好，非常容易理解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/docker-hub.gif&quot; alt=&quot;docker-hub&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然这里非常非常重要的就是如果你是用的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Go&lt;/code&gt; 语言进行开发的项目，&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 镜像构建一定要分成两步。一个是编译镜像，一个是正式镜像，这样最终打包的镜像只会包含一个二进制文件，而不是将源码一起打包。&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; golang:1.12-alpine AS builder&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ... 省略代码&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine:latest&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LABEL&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; maintainer=&quot;Elf Gzp &amp;lt;gzp@741424975@gmail.com&amp;gt; (https://elfgzp.cn)&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=builder /opt/gortal ./&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /gortal
&lt;span class=&quot;c&quot;&gt;# ... 省略代码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;本项目完整的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 链接如下，可以通过链接查看完整的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TNK-Studio/gortal/blob/master/Dockerfile&quot;&gt;https://github.com/TNK-Studio/gortal/blob/master/Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以通过图片看到使用分两步构建和一步构建，最终打包的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt; 镜像大小差异是非常大的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/docker-hub-2.png&quot; alt=&quot;docker-hub-2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;让-readme-看着更高大上-&quot;&gt;让 Readme 看着更高大上 🤪&lt;/h2&gt;

&lt;p&gt;接下来是最重要的一步，写好 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt;，它是你项目的封面。 很多时候我在浏览别人的开源项目，我可能都不在乎他这个项目做了什么，但从他的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt; 写的非常的好，我就给他点个 &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; ⭐️。&lt;/p&gt;

&lt;p&gt;而且最好是能弄双语的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt;，这样能让老外也能看懂，再不行就写一份中文的，剩下交给谷歌翻译。&lt;/p&gt;

&lt;p&gt;当然 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt; 最好不能都是字，要有演示的 &lt;code class=&quot;highlighter-rouge&quot;&gt;GIF&lt;/code&gt;，这样进来的人第一眼就知道你这个项目是干啥的。&lt;/p&gt;

&lt;p&gt;这里笔者推荐 &lt;a href=&quot;https://www.cockos.com/licecap/&quot;&gt;LICEcap&lt;/a&gt; 这个工具，本片文章所有的动图都是使用这个工具录制的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt; 写好之后，给它加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;Badges&lt;/code&gt; - 徽章 就是画龙点睛之笔了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/badges.png&quot; alt=&quot;badges&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Badges&lt;/code&gt; 的添加也是非常简单的，我们只需要使用这个开源项目 &lt;a href=&quot;https://shields.io/&quot;&gt;shields&lt;/a&gt;，并选择我们想要的徽章、填写好 URL、复制粘贴到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readme&lt;/code&gt;，搞定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/shields.gif&quot; alt=&quot;shields&quot; /&gt;&lt;/p&gt;

&lt;p&gt;复制粘贴后你会得到一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;shields&lt;/code&gt; 的链接，你只需要将链接改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 的图片链接格式就可以了，&lt;a href=&quot;https://raw.githubusercontent.com/TNK-Studio/gortal/master/README.md&quot;&gt;参考链接&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;乞讨-star-️&quot;&gt;乞讨 Star ⭐️&lt;/h2&gt;

&lt;p&gt;项目做完了，当然不能就放着不管了，除非你的项目非常非常的优秀，否则他是不会自己涨星星的。&lt;/p&gt;

&lt;p&gt;以本项目为例，笔者就去 &lt;a href=&quot;https://www.v2ex.com/t/626902&quot;&gt;V2EX&lt;/a&gt; 分享了自己的项目，也收获了不少星星 ⭐️。&lt;/p&gt;

&lt;p&gt;你需要去各种社区分享你的开源项目，例如：&lt;a href=&quot;https://v2ex.com/go/create&quot;&gt;V2EX&lt;/a&gt;、&lt;a href=&quot;https://v2ex.com/go/create&quot;&gt;稀土掘金&lt;/a&gt;、&lt;a href=&quot;https://segmentfault.com/&quot;&gt;segmentfault&lt;/a&gt; 等等。&lt;/p&gt;

&lt;p&gt;让你的项目给更多的人看到，同理写博客也是如此，不分享出去就没有正反馈，就少了很多动力。&lt;/p&gt;

&lt;h2 id=&quot;稍微总结一下-&quot;&gt;稍微总结一下 👻&lt;/h2&gt;

&lt;p&gt;笔者在这片文章没有过多的去介绍项目的开发过程，因为觉得开发以外的过程更值得分享。&lt;/p&gt;

&lt;p&gt;开源项目不只是实现了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Idea&lt;/code&gt; 就完事了，你可能还需要去让它更加的方便维护，自动的做一些重复的事情。还要去包装它分享它，这样才会有更多的人使用。当有更多人时候的时候，这个项目就需要花时间去迭代和维护了。&lt;br /&gt;
最后的最后，觉得文章还不错的，觉得这个开源项目还可以的，赏个 &lt;code class=&quot;highlighter-rouge&quot;&gt;star&lt;/code&gt; ⭐️ 吧，&lt;a href=&quot;https://github.com/TNK-Studio/gortal&quot;&gt;https://github.com/TNK-Studio/gortal&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-12-09-gortal-site-project/qi-tao.gif&quot; alt=&quot;qi-tao&quot; /&gt;&lt;/p&gt;</content><author><name>true</name></author><category term="Github" /><category term="gortal" /><category term="siteproject" /><summary type="html">由于最近在 Github 发了一个个人开源项目 - 「gortal」一个使用 Go 语言开发的，超级轻量的堡垒机（跳板机）服务，于是想写一篇博文来记录一下自己的开源心得。</summary></entry><entry><title type="html">ARTS 第十五周</title><link href="https://elfgzp.cn/2019/07/26/arts-week-15.html" rel="alternate" type="text/html" title="ARTS 第十五周" /><published>2019-07-26T02:00:00+00:00</published><updated>2019-07-26T02:00:00+00:00</updated><id>https://elfgzp.cn/2019/07/26/arts-week-15</id><content type="html" xml:base="https://elfgzp.cn/2019/07/26/arts-week-15.html">&lt;h2 id=&quot;algorithm&quot;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/house-robber-ii/submissions/&quot;&gt;213. 打家劫舍 II&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
    
    给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
    
    示例 1:
    
    输入: [2,3,2]
    输出: 3
    解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
    示例 2:
    
    输入: [1,2,3,1]
    输出: 4
    解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
         偷窃到的最高金额 = 1 + 3 = 4 。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这道题是在 &lt;a href=&quot;https://leetcode-cn.com/problems/house-robber/&quot;&gt;198. 打家劫舍&lt;/a&gt; 的基础上增加了一个条件 「所有房屋都围成一圈」，但是思路还是一样的，这道也是一道动态规划的题目。&lt;/p&gt;

&lt;p&gt;首先我们来写出动态规划方程，根据规则我们可以知道：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    example: [1,2,3,1]
    dp[0] = nums[0] = 1
    dp[1] = max(dp[0], nums[1]) = max(1, 2) = 2
    dp[2] = max(dp[0] + nums[2], dp[1]) = max(1 + 3, 2) = 4
    dp[3] = max(dp[1] + nums[3], dp[2]) = max(2 + 1, 4) = 4
    
    example: [2, 7, 9, 3, 1]
    dp[0] = nums[0] = 2
    dp[1] = max(dp[0], nums[1]) = max(2, 7) = 7
    dp[2] = max(dp[0] + nums[2], dp[1]) = max(2 + 9, 7) = 11
    dp[3] = max(dp[1] + nums[3], dp[2]) = max(7 + 3, 11) = 11
    dp[4] = max(dp[2] + nums[4], dp[3]) = max(11 + 1, 11) = 12
    
    example: [2, 1, 1, 2]
    dp[0] = nums[0] = 2
    dp[1] = max(dp[0], nums[1]) = max(2, 1) = 2
    dp[2] = max(dp[0] + nums[2], dp[1]) = max(2 + 1, 2) = 3
    dp[3] = max(dp[1] + nums[3], dp[2]) = max(2 + 2, 3) = 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/house-robber/&quot;&gt;198. 打家劫舍&lt;/a&gt; 这道题的动态规划方程还是很容易得到的：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是增加了一个条件后，数组的首尾值不能同时取，那么我们就分两种情况计算最大值，分别是去头和取尾的数组，接下来写一下代码：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            
    				&lt;span class=&quot;c1&quot;&gt;# 这个条件可以不加
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
    				&lt;span class=&quot;c1&quot;&gt;# 分别计算去头和去尾的数组最大值
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这种解法的空间复杂度为 O(N)，时间复杂度也为 O(N)。&lt;/p&gt;

&lt;p&gt;空间复杂度还是可以优化的，优化后的代码如下：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_rob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;《&lt;a href=&quot;http://boringtechnology.club/&quot;&gt;Choose Boring Technology&lt;/a&gt;》&lt;/p&gt;

&lt;p&gt;这是一篇非常有意思的文章，提醒着我们这群年轻人，不能盲目的选用新技术或者自己喜欢的技术，有时候需要优先考虑那些「无聊的」但往往适合目前开发团队的技术。&lt;/p&gt;

&lt;p&gt;而且不是引入越多的技术栈越好，恰恰相反引入更少的技术栈并且能优雅的解决大多数问题，并且只有较少的维护成本，才是更好的。&lt;/p&gt;

&lt;p&gt;英语不太好的可以看这篇译文，&lt;a href=&quot;https://mp.weixin.qq.com/s?xtrack=1&amp;amp;scene=0&amp;amp;mid=2651017963&amp;amp;sn=2f4da571976237ef4276f7afaced3c48&amp;amp;idx=1&amp;amp;__biz=MjM5MDE0Mjc4MA%253D%253D&amp;amp;chksm=bdbeaab88ac923aea2edb57966581214691a8e5906a604099a2e240c2a976163d9020a280ec5%23rd&quot;&gt;译文 《我是一名技术总监，被技术选型给埋坑里了》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-07-26-arts-week-15/slides-2974ca97-dc9b-4fa7-9bf3-6e416797efe7.003.jpeg&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tip&quot;&gt;Tip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.docker.com/2019/07/intro-guide-to-dockerfile-best-practices/&quot;&gt;Intro Guide to Dockerfile Best Practices&lt;/a&gt; - 如何写好 Dockerfile&lt;br /&gt;
这篇文章将会教会你怎么样写出更好的 Dockerfile，如果你刚开始学习使用 Docker 那更应该看这篇文章！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-07-26-arts-week-15/ef41db8f-fe5e-4a78-940a-6a929db7929d-1.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;share&quot;&gt;Share&lt;/h2&gt;

&lt;p&gt;笔者最近看到一篇文章的片段非常有感触。&lt;/p&gt;

&lt;p&gt;摘自&lt;a href=&quot;https://juejin.im/post/5d3926176fb9a07ef161c719&quot;&gt;《领域驱动设计在前端中的应用》&lt;/a&gt;作者：Vince_&lt;/p&gt;

&lt;h3 id=&quot;垃圾桶现象&quot;&gt;垃圾桶现象&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;在开始本篇文章前，我给读者们分享一个很考验人性的有趣现象，在公司洗手间的洗漱台旁边，放置了一个垃圾桶，每次我洗完手，用纸巾擦干手后，将其扔进垃圾桶，但是偶尔扔不准会扔到垃圾桶外面。&lt;/p&gt;

&lt;p&gt;一般情况下，我会将其捡起，再放入垃圾桶，心里想着：“不能破坏这么干净的环境呀”。
但是，当垃圾桶周边有很多别人没扔进去的餐巾纸时，我就不会那么愿意将自己没扔进去的餐巾纸再捡起来扔进去，想着：“反正都这么邋遢了，多了一个也不会怎样”。
万恶的人心呀！&lt;/p&gt;

&lt;p&gt;过了很久，我接手了一个老的项目，这个项目经过近十个人手迭代，传到我这里时，已经是非常混乱的状态了，阅读代码时，发现了很多不合理的写法与隐藏式BUG，当我在写新的需求时，很自然地，我不会那么精益求精地编写业务逻辑，甚至也会留下一些隐藏的坑给后人。&lt;/p&gt;

&lt;p&gt;恰恰相反，前段时间有幸接手一个大佬的项目，阅读其代码仿佛如沐春风，整个结构堪称完美，逻辑条理清晰，看代码就像看需求文档一样，堪称一绝。这个时候，当我要在其写新的需求，我会模仿其设计，小心翼翼地将自己代码插入其中，就像不忍心破坏这件艺术品一样。&lt;/p&gt;

&lt;p&gt;以上故事纯属我一个理想主义程序员虚构。&lt;/p&gt;

&lt;p&gt;但是回到现实当中，我们维护一个混乱项目和一个优雅项目的心情肯定是不一样的，就像上面讲的那个垃圾桶现象，混乱的项目就像周围遍布很多垃圾的垃圾桶，当你在混乱项目里再添加一些混乱代码后会良心也不会很痛，而优雅的项目你就会注意自己的行为，不能一颗老鼠屎坏了一锅粥。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;严格的-review&quot;&gt;严格的 Review&lt;/h3&gt;

&lt;p&gt;在合入分支前进行严格的 Code Review 是非常有必要的，领域驱动设计是非常不抗“腐蚀”的，不能接受不规范的代码或结构，在初期的 Review 成本或许有些大，等成员之间认知统一后，后续便能愉快地一起写代码了～&lt;/p&gt;</content><author><name>true</name></author><category term="ARTS" /><summary type="html">Algorithm</summary></entry><entry><title type="html">ARTS 第十四周</title><link href="https://elfgzp.cn/2019/07/14/arts-week-14.html" rel="alternate" type="text/html" title="ARTS 第十四周" /><published>2019-07-14T02:00:00+00:00</published><updated>2019-07-14T02:00:00+00:00</updated><id>https://elfgzp.cn/2019/07/14/arts-week-14</id><content type="html" xml:base="https://elfgzp.cn/2019/07/14/arts-week-14.html">&lt;h2 id=&quot;algorithm&quot;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/palindrome-partitioning/&quot;&gt;131. 分割回文串&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain-text&quot;&gt;给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回 s 所有可能的分割方案。

示例:

输入: &quot;aab&quot;
输出:
[
  [&quot;aa&quot;,&quot;b&quot;],
  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决这种「组合」类型的题目，我就会想到用回溯算法来解，由于题目非常简单，这里就直接放出解答，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fastcompany.com/90362562/this-computer-changed-world-youve-never-heard-about-it&quot;&gt;《This computer changed the world—and you’ve never heard about it》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这台电脑改变了世界，你可能从来没听说过它。&lt;/p&gt;

&lt;p&gt;在 20 世纪 60 年代早期，即使是「小型」计算机也有冰箱那么大，但设计出的「阿波罗」计算机需要只有公文包的大小。&lt;/p&gt;

&lt;p&gt;它只有 73 KB 的内存，并且只占一立方英尺的空间。在阿波罗 2504 小时的太空飞行中，没有一个记录在案的软件错误或硬件故障。它不仅仅是那个时代最小、最快、最灵活的计算机，也是最可靠的。&lt;/p&gt;

&lt;h2 id=&quot;tip&quot;&gt;Tip&lt;/h2&gt;

&lt;p&gt;一个非常好用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; 可视化的终端工具 - &lt;a href=&quot;https://github.com/jesseduffield/lazydocker&quot;&gt;lazydocker&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jesseduffield/lazydocker/raw/master/docs/resources/demo3.gif&quot; alt=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;share&quot;&gt;Share&lt;/h2&gt;

&lt;p&gt;分享一个 &lt;a href=&quot;https://twitter.com/python_tip&quot;&gt;Daily Python Tip&lt;/a&gt; 的推特账号（需要梯子），这个账号每天会分享关于 Python 的小技巧，例如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-07-14-arts-week-14/Untitled-b70877a2-9a6e-49fb-b3dc-7704f2ba200c.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;</content><author><name>true</name></author><category term="ARTS" /><summary type="html">Algorithm</summary></entry><entry><title type="html">ARTS 第十三周</title><link href="https://elfgzp.cn/2019/06/30/arts-week-13.html" rel="alternate" type="text/html" title="ARTS 第十三周" /><published>2019-06-30T06:30:00+00:00</published><updated>2019-06-30T06:30:00+00:00</updated><id>https://elfgzp.cn/2019/06/30/arts-week-13</id><content type="html" xml:base="https://elfgzp.cn/2019/06/30/arts-week-13.html">&lt;h2 id=&quot;algorithm&quot;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/next-permutation/&quot;&gt;31. 下一个排列&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
    
    如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
    
    必须原地修改，只允许使用额外常数空间。
    
    以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
    1,2,3 → 1,3,2
    3,2,1 → 1,2,3
    1,1,5 → 1,5,1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这题目非常常见，放个 &lt;code class=&quot;highlighter-rouge&quot;&gt;GIF&lt;/code&gt; 方便理解：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-06-30-arts-week-13/1df4ae7eb275ba4ab944521f99c84d782d17df804d5c15e249881bafcf106173-file_1555696082944.gif&quot; alt=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解题代码：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextPermutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
            Do not return anything, modify nums in-place instead.
            &quot;&quot;&quot;&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
                
                &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jf-blog.fr/download/59/&quot;&gt;《97 Things Every Programmer Should Know&lt;/a&gt;》- Continuous Learning&lt;/p&gt;

&lt;p&gt;技术人是要保持不断学习的, 文章提到了很多个自学的方法。&lt;/p&gt;

&lt;p&gt;“Technology changes fast. Don’t get left behind.”&lt;/p&gt;

&lt;h2 id=&quot;tip&quot;&gt;Tip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/leisurelicht/wtfpython-cn&quot;&gt;What the f*ck Python! 🐍 中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这个有趣的项目意在收集 Python 中那些难以理解和反人类直觉的例子以及鲜为人知的功能特性, 并尝试讨论这些现象背后真正的原理!&lt;/p&gt;

&lt;h2 id=&quot;share&quot;&gt;Share&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://coolshell.cn/articles/19464.html&quot;&gt;《如何超过大多数人》 陈皓&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“在今天的中国，你基本上不用做什么，只需要不使用中国互联网，你就很自然地超过大多数人了。”&lt;/p&gt;

&lt;p&gt;这句话真的是精髓！&lt;/p&gt;</content><author><name>true</name></author><category term="ARTS" /><summary type="html">Algorithm</summary></entry><entry><title type="html">ARTS 第十二周</title><link href="https://elfgzp.cn/2019/06/22/arts-week-12.html" rel="alternate" type="text/html" title="ARTS 第十二周" /><published>2019-06-22T00:30:00+00:00</published><updated>2019-06-22T00:30:00+00:00</updated><id>https://elfgzp.cn/2019/06/22/arts-week-12</id><content type="html" xml:base="https://elfgzp.cn/2019/06/22/arts-week-12.html">&lt;h2 id=&quot;algorithm&quot;&gt;&lt;strong&gt;Algorithm&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/shortest-path-in-binary-matrix/&quot;&gt;1091. 二进制矩阵中的最短路径&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在一个 N × N 的方形网格中，每个单元格有两种状态：空（0）或者阻塞（1）。
    
一条从左上角到右下角、长度为 k 的畅通路径，由满足下述条件的单元格 C_1, C_2, ..., C_k 组成：

相邻单元格 C_i 和 C_{i+1} 在八个方向之一上连通（此时，C_i 和 C_{i+1} 不同且共享边或角）
C_1 位于 (0, 0)（即，值为 grid[0][0]）
C_k 位于 (N-1, N-1)（即，值为 grid[N-1][N-1]）
如果 C_i 位于 (r, c)，则 grid[r][c] 为空（即，grid[r][c] == 0）
返回这条从左上角到右下角的最短畅通路径的长度。如果不存在这样的路径，返回 -1 。


示例 1：

输入：[[0,1],[1,0]]

输出：2

示例 2：

输入：[[0,0,0],[1,1,0],[1,1,0]]

输出：4

提示：

1 &amp;lt;= grid.length == grid[0].length &amp;lt;= 100
grid[i][j] 为 0 或 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这道题一开始我是用dp解的，但是超时了，然后使用 BFS 解法，当 BFS 搜索到终点位置时，就能求得步数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-06-22-arts-week-12/1091-91a03ef8-fb09-4cb4-8668-220e3456188d._-3.jpg&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shortestPathBinaryMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;drs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;popleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;
            
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;
                    
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jf-blog.fr/download/59/&quot;&gt;《97 Things Every Programmer Should Know&lt;/a&gt;》- Choose Your Tools with Care&lt;/p&gt;

&lt;p&gt;在使用开源项目时要谨慎选择，要从项目是否可维护、是否满足当前业务需求等出发，不可盲目使用开源项目。&lt;/p&gt;

&lt;h2 id=&quot;tip&quot;&gt;Tip&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jupyterlab/jupyterlab&quot;&gt;jupyter lab&lt;/a&gt; - jupyter notebook 的升级版，兼容 notebook。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可视化文件树&lt;/li&gt;
  &lt;li&gt;支持 ipython console&lt;/li&gt;
  &lt;li&gt;支持 terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-06-22-arts-week-12/Untitled-a4d865f7-04db-4b45-86ca-77b20015f4d0.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;share&quot;&gt;Share&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://jimmysong.io/migrating-to-cloud-native-application-architectures/&quot;&gt;《迁移到云原生应用架构》中文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本书是 Migrating to Cloud Native Application Architectures 的中文版。&lt;/p&gt;

&lt;p&gt;云时代的云原生应用大势已来，将传统的单体架构应用迁移到云原生架构，你准备好了吗？&lt;/p&gt;

&lt;p&gt;俗话说“意识决定行动”，在迁移到云原生应用之前，我们大家需要先对 Cloud Native（云原生）的概念、组织形式并对实现它的技术有一个大概的了解，这样才能指导我们的云原生架构实践。&lt;/p&gt;

&lt;p&gt;Pivotal 是云原生应用的提出者，并推出了 Pivotal Cloud Foundry 云原生应用平台和 Spring 开源 Java 开发框架，成为云原生应用架构中先驱者和探路者。&lt;/p&gt;

&lt;p&gt;原书作于2015年，其中的示例主要针对 Java 应用，实际上也适用于任何应用类型，云原生应用架构适用于异构语言的程序开发，不仅仅是针对 Java 语言的程序开发。截止到本人翻译本书时，云原生应用生态系统已经初具规模，CNCF 成员不断发展壮大，基于 Cloud Native 的创业公司不断涌现，kubernetes 引领容器编排潮流，和 Service Mesh 技术（如 Linkerd 和 Istio） 的出现，Go 语言的兴起（参考另一本书 Cloud Native Go）等为我们将应用迁移到云原生架构的提供了更多的方案选择。&lt;/p&gt;</content><author><name>true</name></author><category term="ARTS" /><summary type="html">Algorithm</summary></entry></feed>